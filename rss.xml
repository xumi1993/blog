<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Note to Tech</title>
        <link>https://blog.xumijian.me/</link>
        <description></description>
        <generator>Hugo 0.61.0 https://gohugo.io/</generator>
        
            <language>en-US</language>
        
        
            <managingEditor>gomijianxu@gmail.com (Mijian Xu)</managingEditor>
        
        
            <webMaster>gomijianxu@gmail.com (Mijian Xu)</webMaster>
        
        
        <lastBuildDate>Tue, 17 Mar 2020 16:15:54 +0000</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://blog.xumijian.me/rss.xml" />
        
        
            <item>
                <title>用GMT绘制中国及周边构造分区与GPS速度场</title>
                <link>https://blog.xumijian.me/posts/gmt-map/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/gmt-map/</guid>
                <pubDate>Thu, 30 Jan 2020 23:18:20 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p>GMT对地图的处理十分优秀，而且只需要短短几行代码。本文介绍了如何用等距圆锥投影绘制不同范围大小的地形图，以及如何在地形图上绘制断层、文字和矢量等。</p>
<p><img src="/img/gmt-map/region.png" alt=""></p>
<p>这种图像通常出现在论文的第一幅图。主要介绍区域构造背景，根据不同的研究需要，可以叠加不同的信息。上图展示了最终图像，其包括了以下几个图层：</p>
<ul>
<li>等距圆锥投影底图</li>
<li>地形起伏</li>
<li>海岸线和国界</li>
<li>带有三角标示的汇聚板块边界</li>
<li>汇聚方向回汇聚速率标示</li>
<li>中国大陆构造分区</li>
<li>中国大陆GPS速度场</li>
</ul>
<p>以上每一条都是一句或几句GMT命令，将他们按顺序写入脚本即可。</p>
<h3 id="1-">1. 绘制等距圆锥投影底图</h3>
<p><a href="https://docs.gmt-china.org/5.4/proj/Jd/">等距圆锥投影</a>在所有经纬线的比例尺上都不会畸变，因此在绘制高纬度地图时通常选用这种投影方式。
其参数为：</p>
<pre><code>-JD&lt;lon&gt;/&lt;lat&gt;/&lt;lat1&gt;/&lt;lat2&gt;/&lt;width&gt;
</code></pre><ul>
<li><code>&lt;lon&gt;/&lt;lat&gt;</code> 投影中心位置</li>
<li><code>&lt;lat1&gt;/&lt;lat2&gt;</code> 两条标准纬线</li>
<li><code>&lt;width&gt;</code> 图像宽度，后面可以跟单位<code>i</code>（英寸）、<code>c</code>（厘米）等</li>
</ul>
<p>在这个例子中我们用<code>-R</code>选定绘图范围为</p>
<pre><code>R=65/140/10/60
</code></pre><p>这时投影中心位置应设为
$$
lon = (65+140)/2 = 102.5;
lat = (10+60)/2 = 35
$$
两条标准纬线决定了圆锥的角度，这个可以根据自己的喜好修改，只需要保证他们的值不超过绘图范围即可。所以投影参数应该设置为</p>
<pre><code>J=D102.5/35/36/42/7.5i
</code></pre><p>然后我们用<code>psbasemap</code>绘制底图。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt psbasemap -R<span class="nv">$R</span> -J<span class="nv">$J</span> -Bxa10f5 -Bya10f5 -BWSne -K &gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="2-">2. 绘制地形起伏</h3>
<h4 id="heading">截取地形数据</h4>
<p>绘制地形起伏需要用到地形起伏数据，<a href="https://gmt-china.org/data/">GMT中文社区的数据集</a>提供了不同分辨率的地形区起伏数据链接。由于地形起伏数据是通常是全球范围的，我们需要用到<a href="https://docs.gmt-china.org/5.4/module/grdcut/"><code>grdcut</code></a>先将绘图范围内的地形起伏截取出来。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">etopo</span><span class="o">=</span><span class="nv">$data_dir</span>/etopo1.grd <span class="c1">#确定数据的位置</span>
gmt grdcut <span class="nv">$etopo</span> -Gtopo.grd -R
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>-G</code>选项指定了截取出来的文件路径。</li>
<li><code>-R</code>表示截取范围继承上一个命令中的范围，在这里则继承<code>psbasemap</code>中的<code>-R$R</code></li>
</ul>
<h4 id="heading-1">绘制地形起伏</h4>
<p>这一步最重要的是选择一个好看的色标，图中色标是我自定义的一个全球色标，更多色标可以参考<a href="http://soliton.vm.bytemark.co.uk/pub/cpt-city/">cpt-city</a>。有色标之后就可以用<a href="https://docs.gmt-china.org/5.4/module/grdimage/"><code>grdimage</code></a>命令绘制地形起伏</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">topocpt</span><span class="o">=</span><span class="nv">$data_dir</span>/cpt/china.cpt <span class="c1">#确定色标文件的位置</span>
gmt grdimage topo.grd -R -J -C<span class="nv">$topocpt</span> -O -K &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="heading-2">添加光照效果</h4>
<p>有时为了使图像更加立体，尤其是为了更好地反应造山带或海沟的特征这是一种很好的方式。这时我们需要先生成一个光照文件，在数学上其实是计算网格文件的方向梯度，所以使用<a href="https://docs.generic-mapping-tools.org/5.4/grdgradient.html"><code>grdgradient</code></a>命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt grdgradient topo.grd -Ne0.7 -A50 -Gtopo_i.grd
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>topo.grd</code>是之前截取出的地形起伏文件</li>
<li><code>-A50</code>表示方向差分沿方位角50˚</li>
<li><code>-Ne0.7</code>表示对计算后的梯度值做归一化。其这里的归一化公式如下
$$
g_n = A(1.0 - e^{\sqrt{2}})
$$
这里$A=0.7$为归一化振幅</li>
<li><code>-Gtopo_i.grd</code>表示输出文件<code>topo_i.grd</code></li>
</ul>
<p>现在需要修改上面的<code>grdimage</code>命令，在其中加入生成的光照文件，这时绘制地形起伏命令可以写为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt grdimage topo.grd -R -J -C<span class="nv">$topocpt</span> -O -K -Itopo_i.grd &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="3-">3. 绘制海岸线和国界</h3>
<p>GMT提供了全球的海岸线数据。也包括了国界，通过<a href="https://docs.gmt-china.org/5.4/module/pscoast/"><code>pscoast</code></a>绘制它们。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt pscoast -R -J -O -K -A100000 -Dl -W0.3p -N1 &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>-A</code>指定了绘制湖泊和岛屿的最小面积，数值越小湖泊越密。这里的数值很大则忽略了绝大部分湖泊</li>
<li><code>-Dl</code>指定了海岸线的精度为<code>l</code>（low），GMT提供了5个不同精度的版本，从高到低依次为：full、high、intermediate、low和crude对应<code>f|h|i|l|c</code></li>
<li><code>-W0.3p</code>指定了海岸线的粗细</li>
<li><code>-N1</code>表示绘制国界（不可作为发表使用）。</li>
</ul>
<h3 id="4-">4. 绘制板块边界和构造分区</h3>
<p>用<a href="https://docs.gmt-china.org/5.4/module/psxy/"><code>psxy</code></a>可以绘制这些信息，类似的数据集可以在<a href="https://gmt-china.org/data/">GMT中文社区</a>中找到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">block</span><span class="o">=</span><span class="nv">$data_dir</span>/cntectonic.gmt
<span class="nv">phpb</span><span class="o">=</span><span class="nv">$data_dir</span>/PlateBoundary/Philippine.plate
<span class="nv">indianbp</span><span class="o">=</span><span class="nv">$data_dir</span>/PlateBoundary/Indian.plate

<span class="c1"># tectonics</span>
gmt psxy <span class="nv">$block</span> -R -J -O -K -W1.2p,255,-  &gt;&gt; <span class="nv">$ps</span>

<span class="c1"># plate boundary</span>
gmt psxy <span class="nv">$phpb</span> -R -J -O -K -W1.5p,0/105/167 -Sf0.5c/0.1c+r+t+o0.1 &gt;&gt; <span class="nv">$ps</span>
gmt psxy <span class="nv">$indianbp</span> -R -J -O -K -W1.5p,0/105/167 -Sf0.5c/0.1c+r+t+o0.1 &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>绘制构造分区时<code>-W1.2p,255,-</code>指定了线型：<code>1.2p</code>粗、白色和虚线</li>
<li>绘制板块边界时<code>-W1.5p,0/105/167</code>中<code>0/105/167</code>表示用RGB方式指定颜色。</li>
<li><code>-Sf0.5c/0.1c+r+t+o0.1</code>定义了表示俯冲方向的三角的位置和大小
<ul>
<li><code>0.5c/0.1c</code>分别表示相邻符号之间的距离和符号的大小，单位是厘米</li>
<li><code>+r</code>表示符号绘制在线段右侧</li>
<li><code>+t</code>表示符号为三角，更多断层符号请参考<a href="https://docs.gmt-china.org/5.4/module/psxy/"><code>psxy</code>说明</a></li>
<li><code>+o0.1</code>表示线段上的第一个符号距离线段起始偏移0.1</li>
</ul>
</li>
</ul>
<h3 id="5-gps">5. 绘制GPS速度场</h3>
<p>GPS数据来源于 Zhao et al. (2015)，分别有以下几列</p>
<pre><code>#  Velocities of campaign stations with respective to EURASIA plate from 2009-2014
#  Lon.— Longitude in angle degree
#  Lat.— Latitude in angle degree
#  Ve  — Velocity(mm/a) in east component
#  Vn  — Velocity(mm/a) in north component
#  sVe — Velocity error(mm/a) in east component
#  Vn  — Velocity error(mm/a) in north component
#  Site— station code
#  Lon.     Lat.    Ve     Vn       sVe     sVn     Site
   112.6    40.9    4.25   -0.12    0.19    0.21    A002
   112.4    40.2    4.85   -0.77    0.28    0.17    A004
   113.1    41.0    5.77   -2.54    0.88    0.70    A005
   113.2    40.8    3.49   -1.10    0.28    0.27    A006
......
</code></pre><p>对于这样的数据格式我们可以用<a href="https://docs.gmt-china.org/5.4/module/psvelo/"><code>psvelo</code></a>并配合<code>awk</code>绘制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">gps</span><span class="o">=</span><span class="nv">$data_dir</span>/gps_campagin.txt

awk <span class="s1">&#39;{print $1,$2,$3,$4,$5,$6,0}&#39;</span> <span class="nv">$gps</span> <span class="p">|</span> gmt psvelo -J -R -Se0.02c/0.95/0 -A0.15c+e+p0.75p -G255/23/23 -W0.1p,255/23/23 -K -O &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>psvelo</code>中如果要绘制矢量则需要指定<code>-Se</code>，其要求输入有7列，前6列与数据中的前6列一致分别是经度、纬度、东西方向速度、南北方向速度、东西方向速度误差和南北方向速度误差（误差用于绘制置信椭圆）。第7列为两个方向的相关性。所以这里用<code>awk</code>输出数据表的前6列并将第7列设为0</li>
<li><code>-Se0.02c/0.95/0</code>表示绘制矢量，<code>0.02c</code>表示矢量的缩放比例，即速度为1时矢量长度为0.02厘米；<code>0.95</code>表示绘制95%的置信椭圆；<code>0</code>设置文本大小，这里没有文本即为0</li>
<li><code>-A0.15c+e+p0.75p</code>设置了箭头的大小、方向和粗细</li>
<li><code>-G255/23/23</code>表示矢量填充的颜色</li>
</ul>
<h3 id="6-">6. 绘制板块汇聚方向和回汇聚速率标示</h3>
<h4 id="heading-3">绘制板块汇聚方向示意</h4>
<p>本质上这是画了一个很粗的箭头。这里画单一箭头用<code>psxy</code>中的绘制矢量标示即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="m">80</span> <span class="m">23</span> <span class="m">15</span> 1c <span class="p">|</span> gmt psxy -R -J -O -K -SV0.5c+e -W4p -G0 &gt;&gt; <span class="nv">$ps</span>
<span class="nb">echo</span> <span class="m">133</span> <span class="m">22</span> <span class="m">310</span> 1c <span class="p">|</span> gmt psxy -R -J -O -K -SV0.5c+e -W4p -G0 &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>我们用<code>echo</code>命令为<code>psxy</code>输入了4列分别为经度、纬度、方向和矢量长度</li>
<li><code>-SV0.5c+e</code>表示箭头大小为0.5厘米，箭头绘制在矢量尾端</li>
<li><code>-W4p</code>矢量粗细为4p</li>
<li><code>-G0</code>填充黑色</li>
</ul>
<h4 id="heading-4">绘制汇聚速率文字标示</h4>
<p>GMT中<a href="https://docs.gmt-china.org/5.4/module/pstext/"><code>pstext</code></a>用于在图上添加文字。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="m">80</span> <span class="m">22</span> ~4 cm/yr <span class="p">|</span> gmt pstext -A -R -J -O -K -F+f10p+a105 -G255 &gt;&gt; <span class="nv">$ps</span>
<span class="nb">echo</span> <span class="m">134</span> 21.8 ~8 cm/yr <span class="p">|</span> gmt pstext -A -R -J -O -K -F+f10p+a40 -G255 &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>输入为三列分别是经度、纬度和文字内容</li>
<li><code>-A</code>标示旋转角度为水平方向逆时针旋转的角度</li>
<li><code>-F+f10p+a105</code>用于控制文字的属性
<ul>
<li><code>+f10p</code>表示字体大小为10p</li>
<li><code>a105</code>表示旋转105˚</li>
</ul>
</li>
</ul>
<h3 id="7-">7. 一些注意事项</h3>
<p>把这些命令按顺序写在脚本里就可以绘制出完整的图像，但为了脚本的规范我们还需注意</p>
<ul>
<li>所有的变量都应该在脚本开头定义，文中为了方便说明才分别定义了每一个变量。</li>
<li>设置一些GMT参数来美化图像，GMT默认的边框我个人感觉有点粗可以设定其粗细和刻度文字大小
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt <span class="nb">set</span> FONT_ANNOT_PRIMARY <span class="m">10</span> 
gmt <span class="nb">set</span> MAP_FRAME_WIDTH 0.08 
gmt <span class="nb">set</span> MAP_TICK_LENGTH_PRIMARY 0.08 
</code></pre></td></tr></table>
</div>
</div></li>
<li>在所有绘图命令后加一句结尾语句。
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt psxy -R -J -O -T &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>转换图像格式，建议最后将图像转化成一些通用的图像格式如jpg、png、pdf等
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt psconvert -A -P -Tg <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>在脚本结尾删除中间文件。文中生成的 <code>topo.grd</code>、<code>topo_i.grd</code> 都属于中间文件，要在最后删除。如果进行来图像格式转化，ps文件也要删除。</li>
</ul>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/gmt/">GMT</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/gmt/">GMT</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>用GMT绘制极坐标剖面</title>
                <link>https://blog.xumijian.me/posts/gmt-section/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/gmt-section/</guid>
                <pubDate>Sun, 19 Jan 2020 14:42:33 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p><img src="/img/gmt-section/sample.png" alt=""></p>
<p>本文展示了在极坐标系下绘制地理剖面的示例。对于大尺度的地理剖面非常实用。本实例中GMT的难点主要在：</p>
<ul>
<li>极坐标投影与剖面长度的计算。</li>
<li>在极坐标系下绘制410 km和600 km弧线。</li>
<li>彩色图像绘制。</li>
<li>速度矢量的求和与绘制。</li>
</ul>
<h2 id="1-">1. 读取剖面经纬度</h2>
<p>剖面列表如下：</p>
<pre><code>la1 lo1 la2 lo2 a
-- -- -- -- b
-- -- -- --  c

</code></pre><p>我们可以输入测线编号让脚本获取测线位置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash"><span class="nv">la1</span><span class="o">=</span><span class="sb">`</span>grep <span class="nv">$line_name</span> <span class="nv">$lines</span><span class="p">|</span>awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
<span class="nv">lo1</span><span class="o">=</span><span class="sb">`</span>grep <span class="nv">$line_name</span> <span class="nv">$lines</span><span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
<span class="nv">la2</span><span class="o">=</span><span class="sb">`</span>grep <span class="nv">$line_name</span> <span class="nv">$lines</span><span class="p">|</span>awk <span class="s1">&#39;{print $3}&#39;</span><span class="sb">`</span>
<span class="nv">lo2</span><span class="o">=</span><span class="sb">`</span>grep <span class="nv">$line_name</span> <span class="nv">$lines</span><span class="p">|</span>awk <span class="s1">&#39;{print $4}&#39;</span><span class="sb">`</span>
</code></pre></td></tr></table>
</div>
</div><p>其中</p>
<ul>
<li><code>line_name</code>为测线编号</li>
<li><code>lines</code>为剖面列表的路径名（相对或绝对路径）</li>
</ul>
<h2 id="2-">2. 计算剖面长度</h2>
<p>由于每条剖面的长度不一样，我们通常指定剖面两个端点来确定剖面位置。在这个脚本的开始我们先通过<a href="https://docs.gmt-china.org/5.4/module/project/"><code>project</code></a>命令生成测线上的一系列网格点。</p>
<pre><code>gmt project -C$lo1/$la1 -E$lo2/$la2 -G10 -Q &gt; great_circle_points.xyp
</code></pre><p>其中</p>
<ul>
<li><code>-C</code>, <code>-E</code>分别表示测线起始点和终点坐标。</li>
<li><code>-G</code>后的参数表示相邻两个点的距离（这里设置10 km）</li>
<li><code>-Q</code>表示使用地图单位</li>
</ul>
<p>生成的数据重定向到<code>great_circle_points.xyp</code>，后面还会用到:</p>
<pre><code>-50     10      0
-49.9243897556  10.0504392132   10
-49.8487559173  10.1008612754   20
......
-10.1812240988  29.9436088093   4680
-10.08354655    29.974041736    4690
-10     30      4698.54844803
</code></pre><p>输出内容有三列，分别是每个点的经纬度和与第一个点的距离。最后一行的最后一列即为测线的总长（km）。</p>
<p>由于在极坐标投影时单位必须是度，我们要将上述测线单位转换为度，为了简化我们直接将公里数除以111。以下三行命令分别计算了剖面长度（设置绘图范围时使用）、剖面半长度（设置旋转角度是使用）和图幅大小（为了让不同长度剖面等比例）。由于在Shell语言中没有浮点型计算，所以我们用到了awk工具辅助</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash"><span class="nv">length</span><span class="o">=</span><span class="sb">`</span>awk <span class="s1">&#39;{print $NF/111}&#39;</span> great_circle_points.xyp<span class="p">|</span>tail -1<span class="sb">`</span>
<span class="nv">half_length</span><span class="o">=</span><span class="sb">`</span>awk <span class="s1">&#39;BEGIN {print &#34;&#39;</span><span class="nv">$length</span><span class="s1">&#39;&#34;/2}&#39;</span><span class="sb">`</span>
<span class="nv">size</span><span class="o">=</span><span class="sb">`</span>awk <span class="s1">&#39;BEGIN {print &#34;&#39;</span><span class="nv">$length</span><span class="s1">&#39;&#34;*2/3}&#39;</span><span class="sb">`</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="3-">3. 根据计算的范围绘制极坐标底图</h2>
<p>绘制底图时最重要的两个参数是<code>-R</code>和<code>-J</code>，他们分别指定了绘制范围和投影方式。</p>
<h3 id="heading">绘制范围</h3>
<pre><code>R=0/$length/5671/6371
</code></pre><p>其中</p>
<ul>
<li><code>length</code>表示上面我们计算的测线总长，单位是度。</li>
<li><code>5671/6371</code>表示上下两个边界的半径，<code>5671</code>意为下边界为700 km深</li>
</ul>
<h3 id="heading-1">极坐标投影</h3>
<p>极坐标投影在GMT中用<a href="https://docs.gmt-china.org/5.4/proj/Jp/"><code>-JP</code></a>表示。其标准格式为</p>
<pre><code>-JP[a]&lt;width&gt;[/&lt;theta0&gt;][r][z]
</code></pre><p>其中</p>
<ul>
<li><code>width</code>表示图像的宽度</li>
<li><code>theta0</code>表示旋转角度</li>
<li>如果在<code>P</code>后面加<code>a</code>表示逆时针旋转，否则顺时针旋转</li>
<li><code>z</code> 表示将 <code>r</code> 轴标记为深度而不是半径</li>
<li><code>r</code> 表示将径向方向反转，此时r轴范围应在0到90之间</li>
</ul>
<p>这里我们将投影方式设置为</p>
<pre><code>J=Pa${size}c/${half_length}z
</code></pre><ul>
<li><code>size</code>为上面计算的图幅大小</li>
<li><code>half_length</code>为旋转角度。</li>
</ul>
<h3 id="heading-2">绘制底图</h3>
<p>有了<code>-R</code>和<code>-J</code>控制绘图范围和投影方式就可以绘制底图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt psbasemap -R<span class="nv">$R</span> -J<span class="nv">$J</span> -Bxa0f5 -Bya200f100 -BWSne -K -O -Yf7.7c &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><p>需要说明的是</p>
<ul>
<li><code>-Bx</code>表示X轴的刻度，<code>a0</code>表示不画主刻度，<code>f5</code>表示没5度画一格副刻度。</li>
<li><code>-By</code>表示Y轴刻度，每200 km画一格主刻度，每100 km画一格副刻度。</li>
<li><code>-BWSne</code>表示只有左侧和下侧画刻度，上侧和右侧只画边框。</li>
<li><code>-O</code>和<code>-K</code>在<a href="https://docs.gmt-china.org/5.4/option/KO/">中文手册<code>-K</code>和<code>-O</code>选项的说明</a>。</li>
<li><code>-Y</code>表示相对与纸张的偏移量，也可以参见<a href="https://docs.gmt-china.org/5.4/option/XY/">中文手册<code>-X</code>和<code>-Y</code>选项的说明</a>.</li>
</ul>
<h2 id="4-">4. 绘制彩色的网格文件</h2>
<p>下面需要在底图上绘制我们的数据内容（温度，速度等）</p>
<h3 id="heading-3">数据网格化</h3>
<p>虽然我们的数据已经是等间隔的网格数据，但是并不符合GMT绘图的格式标准。GMT要求网格文件是netCDF格式。所以这里使用<code>xyz2grd</code>命令只是将文本格式的数据转换成netCDF格式。当然如果想改变网格间隔或者输入数据是非等间隔的也可以<code>surface</code>、<code>greenspline</code>、<code>nearneighbor</code> 或 <code>triangulate</code>进行插值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">awk <span class="s1">&#39;{print $4,6371-$1,$8}&#39;</span> <span class="nv">$sec_data</span> <span class="p">|</span> gmt xyz2grd -R -I0.1/10 -Gout.grd
</code></pre></td></tr></table>
</div>
</div><ul>
<li>由于<code>xyz2grd</code>要求输入数据为三列（x,y,z 值）所以我们用<code>awk</code>命令从数据表里提取出绘图的三列
<ul>
<li>第一列是横坐标，距离起始点的长度，单位是度。</li>
<li>第二列是半径，所以用地球半径减去深度。</li>
<li>第三列是数值。</li>
</ul>
</li>
<li><code>-R</code>选项表示继承上个命令设定的范围。</li>
<li><code>-I</code>表示网格之间的间隔。<code>0.1</code>表示横向间隔为0.1度，<code>10</code>表示纵向间隔10 km。单位与数据表中的单位相同。</li>
<li><code>-G</code>后面跟一个输出网格文件的文件名</li>
</ul>
<h3 id="heading-4">生成一个色标文件</h3>
<p>这是所有脚本绘图工具的弱点，我们没有办法用GMT像ParaView一样拖动色块来自定义色标。所以有两种方式去生成色标。</p>
<ul>
<li>用GMT中的<code>makecpt</code>或<code>grd2cpt</code>命令生成等间隔色标文件。</li>
<li>色标文件本质是一个文本文件，所以也可以手动修改文件中的数值来生成色标。</li>
</ul>
<p>如果不需要刻意突出某个范围的数值，而且数值变化偏线性，那么使用<code>makecpt</code>命令即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt makecpt -Crainbow -T200/1700/50 -Z &gt; tmp.cpt
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>-C</code>选项后跟输入的色标文件（CPT文件）。GMT提供了一些内置的色标（参见<a href="https://docs.gmt-china.org/5.4/cpt/builtin-cpt/">GMT中文手册内置CPT</a>），在<code>-C</code>后加上这些内置色标名即可。色标也可以是一个自定义的色标文件，这时在<code>-C</code>后面加上文件的路径名即可。自定义色标可以在<a href="http://soliton.vm.bytemark.co.uk/pub/cpt-city/">cpt-city</a>中获取。</li>
<li><code>-T</code>表示色标相对于数值的取值范围。<code>200/1700/50</code>意为从200至1700每50在输入色标中取一个值。</li>
<li><code>-Z</code>表示使用连续色标。</li>
<li>最后输出重定向至一个<code>cpt</code>文件</li>
</ul>
<h3 id="heading-5">绘制网格文件</h3>
<p>有了网格文件和色标文件，就可以绘制图像了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt grdimage out.grd -R -J -O -K -Ctmp.cpt &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>out.grd</code>是之前生成的网格文件名。</li>
<li><code>-C</code>后加之前生成的色标文件名。</li>
</ul>
<p><strong>这时一副图的主体就画完了！</strong></p>
<h2 id="5-">5. 在极坐标下画弧线</h2>
<p>这里我们想标注410 km和660 km的深度，在极坐标投影下是弧线，所以不能直接指定两个端点坐标，这样画出来是一条直线（在笛卡尔投影下这样做是没问题的）。我们的做法是利用之前生成的测线文件<code>great_circle_points.xyp</code>的点，把这些点连起来，来生成弧线。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">awk <span class="s1">&#39;{print $3/111, 5961}&#39;</span> great_circle_points.xyp<span class="p">|</span>gmt psxy -R -J -O -K -W0.7p,-+s  &gt;&gt; <span class="nv">$ps</span>
awk <span class="s1">&#39;{print $3/111, 5711}&#39;</span> great_circle_points.xyp<span class="p">|</span>gmt psxy -R -J -O -K -W0.7p,-+s  &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>awk</code>用来生成每个点的坐标。<code>$3/111</code>是将每个点距起始点距离转化为度，<code>5961</code>和<code>5711</code>分别表示410 km和660 km对应的半径。</li>
<li><code>-W</code>选项指定了线型。<code>0.7p</code>表示线的粗细，<code>-</code>表示虚线，<code>+s</code>表示两点之间以弧线连接（如果点数够密则影响不大，可以去掉）。</li>
</ul>
<h2 id="6-">6. 绘制色标</h2>
<p>现在用刚才生成的色标文件绘制色标，用到<a href="https://docs.gmt-china.org/5.4/module/psscale/"><code>psscale</code></a>命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt psscale -DjML+w4c/0.4c+o<span class="sb">`</span>awk <span class="s1">&#39;BEGIN {print &#34;&#39;</span><span class="nv">$size</span><span class="s1">&#39;&#34;+1}&#39;</span><span class="sb">`</span>c/-0.5c -Ctmp.cpt -Bxafg+l<span class="s2">&#34;Temperature (K)&#34;</span> -R -J -O -K &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>-D</code>选项控制了色标的长宽和位置。
<ul>
<li><code>jML</code>指定色标的锚点在中间左侧，参考<a href="https://docs.gmt-china.org/5.4/basis/embellishment/">绘制修饰物</a>。</li>
<li><code>+w4c/0.4c</code>表示色标的长为4厘米，宽为0.4厘米。</li>
<li><code>+o</code>指定了色标相对于底图的位置。
<ul>
<li><code> `awk 'BEGIN {print &quot;'$size'&quot;+1}'`c</code>表示向右偏移的距离为<code>$size+1</code>厘米。</li>
<li><code>-0.5c</code>表示向下偏移1厘米</li>
</ul>
</li>
</ul>
</li>
<li><code>-C</code>后面跟要绘制的色标文件</li>
<li><code>-Bx</code>指定色标的刻度
<ul>
<li><code>afg</code>表示自动绘制主刻度、副刻度和网格线。</li>
<li><code>+l&quot;Temperature (K)&quot;</code>表示添加标注为Temperature (K)</li>
</ul>
</li>
</ul>
<h2 id="7-">7. 绘制另一个子图</h2>
<p>现在要在同一个文件中绘制另一个子图，所以要先画一个一样的底图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt psbasemap -R<span class="nv">$R</span> -J<span class="nv">$J</span> -Bxa0f5 -Bya200f100 -BWSne -K -O -Yf7.7c &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><p>与上一个子图不同的是通过<code>-Y</code>对底图进行偏移，以免与之前的子图重叠，具体的偏移量只能手动慢慢调试。</p>
<h2 id="8-">8. 绘制速度矢量的模。</h2>
<p>在数据表里速度有垂直和水平两个分量，我们要先求两个分量矢量和的模，然后绘制成彩色图像。</p>
<h3 id="heading-6">分别将两个分量网格化</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">awk <span class="s1">&#39;{print $4,6371-$1,$5}&#39;</span> <span class="nv">$sec_data</span> <span class="p">|</span> gmt xyz2grd -R -I0.1/10 -Gvr.grd
awk <span class="s1">&#39;{print $4,6371-$1,-1*$7}&#39;</span> <span class="nv">$sec_data</span> <span class="p">|</span> gmt xyz2grd -R -I0.1/10 -Gvz.grd
</code></pre></td></tr></table>
</div>
</div><h3 id="heading-7">用两个分量的网格文件求矢量和的模</h3>
<p>这里用GMT内置的<code>grdmath</code>命令，对两个分量的网格文件求矢量和的模。
$$
|vel|=\sqrt{vx^2+vz^2}
$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt grdmath vr.grd vz.grd <span class="nv">HYPOT</span> <span class="o">=</span> vel.grd
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>HYPOT</code>表示运算符为上述公式</li>
<li><code>vel.grd</code>为输出的网格文件名</li>
</ul>
<p>下面用<code>grdimage</code>命令绘制网格文件即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt grdimage vel.grd -R -J -O -K -Cvel.cpt &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><p>这里经过尝试<code>makecpt</code>和<code>grd2cpt</code>生成的色标都没办法满足我的要求。所以<code>vel.cpt</code>只能通过漫长的调试手动生成，其实没什么难度只是过程漫长。</p>
<h2 id="9-">9. 绘制矢量</h2>
<p>现在我们要将矢量方向以箭头的方式绘制在上一个图层上，同时箭头的长短表示大小。这里我们用到之前生成的两个分量的网格文件，以及<a href="https://docs.gmt-china.org/5.4/module/grdvector/"><code>grdvector</code></a>命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt grdvector -R -J -O -K vr.grd vz.grd -W0.8p -Si9p -Ix10 -Q0.3c+b+jb+h1+p- -G0 &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>-W</code>指定矢量轮廓的粗细为<code>0.8p</code></li>
<li><code>-S</code>指定每个矢量数据单位在地图上为<code>9p</code></li>
<li><code>-Q</code>指定箭头的属性，参考<a href="https://docs.gmt-china.org/5.4/basis/vector/">绘制矢量/箭头</a></li>
<li><code>-Ix10</code>表示每个每10个网格画一个箭头，以免箭头太密影响美观。</li>
<li><code>-G</code>指定箭头填充颜色，<code>0</code>表示黑色</li>
</ul>
<h3 id="heading-8">将箭头填充为渐变色</h3>
<p>为了突出数值大小，箭头填充的颜色可以按照其渐变，我们这里使用灰度渐变的色标。我们不知道具体数值的大小范围，所以先生成一个标准色标，在用<code>grd2cpt</code>命令自动生成。</p>
<ul>
<li>
<p>生成灰度值从0-200的连续色标（黑色至灰度值为200的灰色）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">cat&gt;tmp.cpt<span class="s">&lt;&lt;eof
</span><span class="s">0   200  200  200  1  0   0   0
</span><span class="s">eof</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>按照数值大小自动生成色标文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt grd2cpt vel.grd -Ctmp.cpt -Z &gt; tmp.cpt1
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>将上述<code>grdvector</code>中<code>-G</code>选项换成<code>-C</code>选项就可以把填充色改为渐变色。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt grdvector -R -J -O -K vr.grd vz.grd -W0.8p -Si9p -Ix10 -Q0.3c+b+jb+h1+p- -Ctmp.cpt1 &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="heading-9">只绘制部分箭头</h3>
<p>有时我们只想绘制部分数值较大的箭头，而省略数值较小的箭头。这是我们需要对数据表做一些筛选判断，并且重新网格化两个分量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">awk <span class="s1">&#39;sqrt($5*$5+$7*$7)&gt;0.9{print $4,6371-$1,$5}&#39;</span> <span class="nv">$sec_data</span> <span class="p">|</span> gmt xyz2grd -R -I0.1/10 -Gvr.grd
awk <span class="s1">&#39;sqrt($5*$5+$7*$7)&gt;0.9{print $4,6371-$1,-1*$7}&#39;</span> <span class="nv">$sec_data</span> <span class="p">|</span> gmt xyz2grd -R -I0.1/10 -Gvz.grd
</code></pre></td></tr></table>
</div>
</div><p>与之前网格化命令不同的是我们在<code>awk</code>中多加了一行判断<code>sqrt($5*$5+$7*$7)&gt;0.9</code>，来筛选出矢量和大小大于0.9的网格点。然后再用<code>grdvector</code>绘制矢量时则只绘制矢量和大小大于0.9的网格。</p>
<h2 id="10-">10. 绘制剖面的地形起伏</h2>
<p>我们还要在上幅图上方绘制地形起伏。由于地形的变化相对地球半径的尺度非常小，所以需要将地形起伏进行适当放大。</p>
<h3 id="heading-10">重新定义绘图范围</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash"><span class="nv">R</span><span class="o">=</span>0/<span class="nv">$length</span>/6371/6561
</code></pre></td></tr></table>
</div>
</div><p>长度不变，高度进行放大。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gmt psbasemap -R<span class="nv">$R</span> -JPa<span class="si">${</span><span class="nv">size</span><span class="si">}</span>c/<span class="si">${</span><span class="nv">half_length</span><span class="si">}</span> -K -O -Bws -Yf12.3c &gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>只标注<code>-Bws</code>可以去除四周的边框和刻度。</li>
</ul>
<h3 id="heading-11">截取地形起伏数据</h3>
<p>这里使用<a href="https://docs.generic-mapping-tools.org/5.4/grdtrack.html"><code>grdtrack</code></a>命令从地形起伏数据中截取该剖面的地形起伏。这条命令的输出有四列分别为经、纬度、距起始点的距离和高程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt grdtrack great_circle_points.xyp -G<span class="nv">$etopo</span> <span class="p">|</span> awk <span class="s1">&#39;{print $3/111,6371+($4/1000)*40}&#39;</span> &gt; elev
</code></pre></td></tr></table>
</div>
</div><p>在绘制地形时只需要横纵两个坐标，即距离和高程。我们对高程放大了40倍。</p>
<h3 id="heading-12">绘制地形起伏并填充颜色</h3>
<p>这时已经可以利用<code>elev</code>文件绘制高程了，但是要想填充颜色需要让图形闭合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">tail -r great_circle_points.xyp <span class="p">|</span> awk <span class="s1">&#39;{print $3/111,6371}&#39;</span> &gt;&gt; elev
</code></pre></td></tr></table>
</div>
</div><p>这行命令中我们将测线上的点倒序追加到<code>elev</code>后面来形成闭合曲线。我们用下面的示意图来表述这一过程
<img src="/img/gmt-section/elev.jpeg" alt=""></p>
<p>最后我们用<code>psxy</code>命令绘制地形起伏</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">gmt psxy elev -R -J -W -Ggray -N -K -O&gt;&gt; <span class="nv">$ps</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>-G</code>表示填充颜色</li>
<li><code>-N</code>表示超出<code>$R</code>范围的数据仍然绘制。</li>
</ul>
<h2 id="heading-13">总结和问题</h2>
<ol>
<li>同样是绘制剖面在极坐标下绘制比在笛卡尔坐标下绘制难得多。所以如果剖面不是很长就别用极坐标。</li>
<li>极坐标下没办法绘制Y轴的标签，通常情况下在<code>-By</code>选项后加<code>+l&quot;Depth (km)&quot;</code>即可，但是极坐标不行。需要的话只能用其他方式画了。</li>
</ol>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/gmt/">GMT</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/gmt/">GMT</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>三维数据体生成与切片</title>
                <link>https://blog.xumijian.me/posts/interp/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/interp/</guid>
                <pubDate>Sat, 11 Jan 2020 21:17:48 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p>我们在计算得到的数据通常是非等间隔网格，为了用GMT进行2D可视化，需要将数据网格化后进行插值。</p>
<h2 id="1-">1. 将文本文件转换为三维数据体</h2>
<p>我们拿到的原始文件是包含经度、纬度、深度、和每个数据点的数据（速度、温度、密度等）组成的文本格式文件，以这次的数据为例，我将Excel文件直接复制到文本中形成了以空格为分隔符的文本文件，以下列出部分行：</p>
<pre><code>10.55467676	108.4399258	175.207137	0.01217283	-0.015367995	-9.20E-05	1681.16272	3291.964844	5848311808	1.00E+21
10.55113868	107.7219827	175.2071289	0.012363088	-0.01525117	-0.00010885	1675.885254	3292.487305	5847836672	1.00E+21
10.25584183	108.1032219	146.0060139	0.012991064	-0.014229504	-9.73E-05	1679.978882	3292.082031	4886236672	1.00E+21
9.998090145	108.4349265	146.030284	0.01289901	-0.014223722	-8.98E-05	1681.883859	3291.893512	4886096558	1.00E+21
9.998090145	107.8137658	146.0285942	0.013020781	-0.014152945	-0.000117022	1675.698183	3292.505842	4885533575	1.00E+21
10.55468488	108.439848	146.0060673	0.012965109	-0.014302315	-7.66E-05	1684.43457	3291.640869	4887052800	1.00E+21
10.5511462	107.7219104	146.0062614	0.013087932	-0.014204981	-0.000102527	1677.521362	3292.325439	4886397440	1.00E+21
10.25585045	108.1031426	116.804997	0.013968474	-0.01280891	-1.20E-05	1596.835083	3300.313232	3924829952	1.00E+21
9.998090145	108.4348529	116.8293289	0.013916044	-0.012845078	-5.31E-06	1600.383762	3299.961929	3924717946	1.00E+21
</code></pre><h2 id="heading">网格化说明</h2>
<p>由于这样的数据点是非等间隔的，没有办法进行切片时所需要的插值操作，所以我先将数据进行了三维网格化。这里我选用了Python语言和它的科学计算模块Numpy、Scipy进行网格化。Matlab也可以实现类似功能，核心函数也叫<code>griddata</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">scipy.interpolate</span> <span class="kn">import</span> <span class="n">griddata</span>

<span class="k">def</span>  <span class="nf">read_dat</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span><span class="p">:</span>
   <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
   <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">*</span><span class="o">=</span>  <span class="mi">100</span>
   <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">*</span><span class="o">=</span>  <span class="mi">100</span>
   <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="o">*</span><span class="o">=</span>  <span class="mi">100</span>
   <span class="k">return</span> <span class="n">data</span>

<span class="k">def</span> <span class="nf">dat2npz</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">data</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">latmin</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">latmax</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="n">lonmin</span><span class="o">=</span><span class="mi">70</span><span class="p">,</span> <span class="n">lonmax</span><span class="o">=</span><span class="mi">140</span><span class="p">,</span> <span class="n">depmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">depmax</span><span class="o">=</span><span class="mi">700</span><span class="p">)</span><span class="p">:</span>
   <span class="c1"># 在三个纬度上设置研究区域和网格间隔，网格间隔根据需要选取。</span>
   <span class="n">lat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">latmin</span><span class="p">,</span> <span class="n">latmax</span><span class="o">+</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
   <span class="n">lon</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">lonmin</span><span class="p">,</span> <span class="n">lonmax</span><span class="o">+</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
   <span class="n">dep</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">depmin</span><span class="p">,</span> <span class="n">depmax</span><span class="o">+</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
   <span class="n">new_dep</span><span class="p">,</span> <span class="n">new_lat</span><span class="p">,</span> <span class="n">new_lon</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">dep</span><span class="p">,</span> <span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">,</span> <span class="n">indexing</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">ij</span><span class="s1">&#39;</span><span class="p">)</span>
   <span class="c1"># 读取数据列表</span>
   <span class="n">data</span> <span class="o">=</span>  <span class="n">read_dat</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
   <span class="c1"># 设置原始数据点位置</span>
   <span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span><span class="p">]</span><span class="p">)</span><span class="o">.</span><span class="n">T</span>
   <span class="c1"># 对每一种数据进行网格化</span>
   <span class="n">vew</span> <span class="o">=</span>  <span class="n">griddata</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span><span class="p">,</span> <span class="p">(</span><span class="n">new_dep</span><span class="p">,</span> <span class="n">new_lat</span><span class="p">,</span> <span class="n">new_lon</span><span class="p">)</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">linear</span><span class="s1">&#39;</span><span class="p">)</span>
   <span class="n">vns</span> <span class="o">=</span>  <span class="n">griddata</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span><span class="p">,</span> <span class="p">(</span><span class="n">new_dep</span><span class="p">,</span> <span class="n">new_lat</span><span class="p">,</span> <span class="n">new_lon</span><span class="p">)</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">linear</span><span class="s1">&#39;</span><span class="p">)</span>
   <span class="n">vrad</span> <span class="o">=</span>  <span class="n">griddata</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span><span class="p">,</span> <span class="p">(</span><span class="n">new_dep</span><span class="p">,</span> <span class="n">new_lat</span><span class="p">,</span> <span class="n">new_lon</span><span class="p">)</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">linear</span><span class="s1">&#39;</span><span class="p">)</span>
   <span class="n">t</span> <span class="o">=</span>  <span class="n">griddata</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span><span class="p">,</span> <span class="p">(</span><span class="n">new_dep</span><span class="p">,</span> <span class="n">new_lat</span><span class="p">,</span> <span class="n">new_lon</span><span class="p">)</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">linear</span><span class="s1">&#39;</span><span class="p">)</span>
   <span class="n">dens</span> <span class="o">=</span>  <span class="n">griddata</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span><span class="p">,</span> <span class="p">(</span><span class="n">new_dep</span><span class="p">,</span> <span class="n">new_lat</span><span class="p">,</span> <span class="n">new_lon</span><span class="p">)</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">linear</span><span class="s1">&#39;</span><span class="p">)</span>
   <span class="c1"># 将网格化后每个维度坐标和数据保存在一个.npz文件中</span>
   <span class="n">np</span><span class="o">.</span><span class="n">savez</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">data_0.1.npz</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">dep</span><span class="o">=</span><span class="n">dep</span><span class="p">,</span> <span class="n">lat</span><span class="o">=</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="n">lon</span><span class="p">,</span> <span class="n">vew</span><span class="o">=</span><span class="n">vew</span><span class="p">,</span> <span class="n">vns</span><span class="o">=</span><span class="n">vns</span><span class="p">,</span> <span class="n">vrad</span><span class="o">=</span><span class="n">vrad</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">,</span> <span class="n">dens</span><span class="o">=</span><span class="n">dens</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="2-">2. 平面和剖面的切片</h2>
<p>用GMT绘制二维图像需要从上一步网格好的数据文件中对某个平面或剖面进行切片。对平面的切片简单一些，对剖面的切片则需要先对大圆弧路径进行插值，生成数据点坐标，再用这些坐标对三维数据体进行插值。</p>
<h3 id="21---cut-planepy">2.1 对数据的平面切片  (<code>cut_plane.py</code>)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">scipy.interpolate</span> <span class="kn">import</span> <span class="n">interpn</span>

<span class="c1"># 在指定的区域内生成数据点坐标，理论上说这些点也可以是不等间隔的，但是GMT绘图时依旧需要网格化，所以这里还是使用等间隔插值。</span>
<span class="k">def</span> <span class="nf">init_plane</span><span class="p">(</span><span class="n">lat1</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">lon1</span><span class="o">=</span><span class="mi">65</span><span class="p">,</span> <span class="n">lat2</span><span class="o">=</span><span class="mi">55</span><span class="p">,</span> <span class="n">lon2</span><span class="o">=</span><span class="mi">140</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span><span class="p">:</span>
    <span class="n">lat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">lat1</span><span class="p">,</span> <span class="n">lat2</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
    <span class="n">lon</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">lon1</span><span class="p">,</span> <span class="n">lon2</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
    <span class="n">points</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">la</span> <span class="ow">in</span> <span class="n">lat</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">lo</span> <span class="ow">in</span> <span class="n">lon</span><span class="p">:</span>
            <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="p">[</span><span class="n">depth</span><span class="p">,</span> <span class="n">la</span><span class="p">,</span> <span class="n">lo</span><span class="p">]</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>

<span class="c1"># 生成的数据点对三维数据体插值</span>
<span class="k">def</span> <span class="nf">interall</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span><span class="p">:</span>
    <span class="n">inter_data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="p">[</span><span class="n">points</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span><span class="p">)</span>
    <span class="n">inter_data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">interpn</span><span class="p">(</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dep</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lat</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lon</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">vew</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">bounds_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fill_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">inter_data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">interpn</span><span class="p">(</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dep</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lat</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lon</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">vns</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">points</span><span class="p">,</span> <span class="n">bounds_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fill_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="c1"># 返回时同时将数据点坐标那三列于插值得到的数据拼贴后一起输出</span>
    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">(</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span><span class="p">,</span> <span class="n">inter_data</span><span class="p">)</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">cut_plane</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">data_0.1.npz</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">:</span>
    <span class="n">data</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
    <span class="n">points</span> <span class="o">=</span> <span class="n">init_plane</span><span class="p">(</span><span class="p">)</span>
    <span class="n">inter_data</span> <span class="o">=</span> <span class="n">interall</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span>
    <span class="c1"># 最后输出到一个文本文本文件</span>
    <span class="n">np</span><span class="o">.</span><span class="n">savetxt</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">vel_200.dat</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">inter_data</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>那么这时输出的数据包括了4列，依次为经度，纬度，南北方向的速度和东西方向的速度。</p>
<h3 id="22--cut-secpy">2.2 对数据的剖面切片 (<code>cut_sec.py</code>)</h3>
<p>虽热都是对数据体的切片，但是剖面的切片要更复杂一些。主要的难点是：</p>
<ul>
<li>对大圆弧路径的等距离划分。其中要考虑球面三角函数和椭球矫正（有现成<a href="http://www.seis.sc.edu/software/distaz/">代码</a>）。但是这里为了方便直接调用了GMT里的<a href="https://docs.gmt-china.org/5.4/module/project/"><code>project</code></a>命令，直接生成横向网格，更加方便。</li>
<li>对原先的南北和东西分量进行坐标旋转，旋转角度是剖面两个端点之间的方位角（请参考<a href="http://service.iris.edu/irisws/rotation/docs/1/help/">IRIS 的一个教程</a>）。</li>
</ul>
<p>那么先导入函数库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">scipy.interpolate</span> <span class="kn">import</span> <span class="n">interpn</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">seispy_distaz</span> <span class="kn">import</span> <span class="o">*</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="heading-1">生成数据点</h4>
<p>以下是生成据点的函数。需要说明的是<code>gmt project</code>是GMT内一个用于投影点的命令，这里直接在Python中调用了，这条命令的具体说明请参考<a href="https://docs.gmt-china.org/5.4/module/project/">GMT中文手册</a>。所以如果系统中没有GMT，就只能尝试用别的方法了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="k">def</span> <span class="nf">gen_points</span><span class="p">(</span><span class="n">lat1</span><span class="p">,</span> <span class="n">lon1</span><span class="p">,</span> <span class="n">lat2</span><span class="p">,</span> <span class="n">lon2</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">depmax</span><span class="o">=</span><span class="mi">700</span><span class="p">)</span><span class="p">:</span>
	<span class="c1"># 生成GMT命令字符串</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">gmt project -C{}/{} -E{}/{} -G{} -Q</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">lon1</span><span class="p">,</span> <span class="n">lat1</span><span class="p">,</span> <span class="n">lon2</span><span class="p">,</span> <span class="n">lat2</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
	<span class="c1"># 开启一个命令行子进程，并将cmd传入</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
	<span class="c1"># 读取网格点经纬度和相对第一个点的距离</span>
    <span class="n">line_pos</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">loadtxt</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
    <span class="n">points</span> <span class="o">=</span> <span class="p">[</span><span class="p">]</span>
	<span class="c1"># 对深度进行网格有depth和val确定最大深度和间隔</span>
    <span class="k">for</span> <span class="n">dep</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">depmax</span><span class="o">+</span><span class="n">val</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">line_pos</span><span class="p">:</span>
			<span class="c1"># 生成数据列表，这里/111是将千米转化为度</span>
            <span class="n">points</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="p">[</span><span class="n">dep</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="mi">111</span><span class="p">]</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">points</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="heading-2">对矢量数据进行坐标系旋转</h4>
<p>大部分都是标准公式。需要一提的是<code>distaz</code>来自<code>seispy_distaz.py</code>，一个在原版<code>distaz</code>基础上改进过的版本，说不定以后做其他处理还能用的上。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="k">def</span> <span class="nf">rotate</span><span class="p">(</span><span class="n">vew</span><span class="p">,</span> <span class="n">vns</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span><span class="p">:</span>
    <span class="n">angle</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mod</span><span class="p">(</span><span class="n">baz</span><span class="o">+</span><span class="mi">180</span><span class="p">,</span> <span class="mi">360</span><span class="p">)</span>
    <span class="n">vr</span> <span class="o">=</span> <span class="n">vns</span><span class="o">*</span><span class="n">cosd</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span> <span class="o">+</span> <span class="n">vew</span><span class="o">*</span><span class="n">sind</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
    <span class="n">vt</span> <span class="o">=</span> <span class="n">vew</span><span class="o">*</span><span class="n">cosd</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span> <span class="o">-</span> <span class="n">vns</span><span class="o">*</span><span class="n">sind</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">vr</span><span class="p">,</span> <span class="n">vt</span>


<span class="k">def</span> <span class="nf">velproj</span><span class="p">(</span><span class="n">vew</span><span class="p">,</span> <span class="n">vns</span><span class="p">,</span> <span class="n">lat1</span><span class="p">,</span> <span class="n">lon1</span><span class="p">,</span> <span class="n">lat2</span><span class="p">,</span> <span class="n">lon2</span><span class="p">)</span><span class="p">:</span>
    <span class="n">baz</span> <span class="o">=</span> <span class="n">distaz</span><span class="p">(</span><span class="n">lat1</span><span class="p">,</span> <span class="n">lon1</span><span class="p">,</span> <span class="n">lat2</span><span class="p">,</span> <span class="n">lon2</span><span class="p">)</span><span class="o">.</span><span class="n">baz</span>
    <span class="n">vr</span><span class="p">,</span> <span class="n">vt</span> <span class="o">=</span> <span class="n">rotate</span><span class="p">(</span><span class="n">vew</span><span class="p">,</span> <span class="n">vns</span><span class="p">,</span> <span class="n">baz</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">vr</span><span class="p">,</span> <span class="n">vt</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="heading-3">数据插值</h4>
<p>插值和平面切片是类似的。只有以下几点不同：</p>
<ul>
<li>速度为坐标系转化后的速度。</li>
<li>需要对垂直方向速度，温度和密度等进行插值。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="k">def</span> <span class="nf">interall</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">vr</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span><span class="p">:</span>
    <span class="n">inter_data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="p">[</span><span class="n">points</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span><span class="p">)</span>
    <span class="n">inter_data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">interpn</span><span class="p">(</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dep</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lat</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lon</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="n">vr</span><span class="p">,</span> <span class="n">points</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span><span class="p">,</span> <span class="n">bounds_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fill_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">inter_data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">interpn</span><span class="p">(</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dep</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lat</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lon</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">points</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span><span class="p">,</span> <span class="n">bounds_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fill_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">inter_data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">interpn</span><span class="p">(</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dep</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lat</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lon</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">vrad</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">points</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span><span class="p">,</span> <span class="n">bounds_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fill_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">inter_data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">interpn</span><span class="p">(</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dep</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lat</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lon</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">t</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">points</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span><span class="p">,</span> <span class="n">bounds_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fill_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">inter_data</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">interpn</span><span class="p">(</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dep</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lat</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lon</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">)</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">dens</span><span class="s1">&#39;</span><span class="p">]</span><span class="p">,</span> <span class="n">points</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span><span class="p">,</span> <span class="n">bounds_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fill_value</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">(</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">inter_data</span><span class="p">)</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="heading-4">这个脚本中一些其他小技巧</h4>
<p>由于剖面不止一条，所以我按照我在地震学上的处理方式做了一个剖面列表，给每个剖面编上序号，切剖面和画剖面时只需要改动剖面编号。剖面列表<code>lines.lst</code>内容如下：</p>
<pre><code>25 80 45 87 a
24 85 25 113 b
25 80 40 118 c

</code></pre><blockquote>
<p>最后最好空一行，否则有的语言读取可能会有bug。</p>
</blockquote>
<p>所以在剖面切片的脚本中就加入了输入剖面编号，剖面切片的功能。以下是输入编号输出对应剖面经纬度的函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="k">def</span> <span class="nf">load_line</span><span class="p">(</span><span class="n">line_name</span><span class="p">,</span> <span class="n">line_file</span><span class="o">=</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">lines.lst</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">:</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">line_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">line_content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">line_str</span> <span class="ow">in</span> <span class="n">line_content</span><span class="p">:</span>
        <span class="n">line_str</span> <span class="o">=</span> <span class="n">line_str</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">line_str</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">line_name</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">line_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="p">)</span><span class="p">[</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/seismology/">Seismology</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/geophysics/">Geophysics</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/%E6%8F%92%E5%80%BC/">插值</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/%E7%BD%91%E6%A0%BC%E5%8C%96/">网格化</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>判断地理坐标点是否在多边形内的Python实现</title>
                <link>https://blog.xumijian.me/posts/points-in-polygon/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/points-in-polygon/</guid>
                <pubDate>Tue, 08 Oct 2019 21:05:16 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p>在地学问题中经常会遇到判断点是否在多边形内的问题，例如成像问题中射线是否穿过某个网格即为此类问题。在Python中我们对处理这样的问题需要满足以下条件：</p>
<ul>
<li>输入多边形经纬度坐标和待判断点的经纬度坐标，输出<code>True</code>/<code>False</code></li>
<li>能与numpy完美衔接</li>
<li>输入为多个点也可以处理</li>
</ul>
<h2 id="-shapely-">用 Shapely 定义多边形</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span>
<span class="kn">from</span> <span class="nn">shapely.geometry.polygon</span> <span class="kn">import</span> <span class="n">Polygon</span>
<span class="kn">from</span> <span class="nn">io</span> <span class="kn">import</span> <span class="n">StringIO</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="n">poly</span> <span class="o">=</span> <span class="sa"></span><span class="s1">&#39;&#39;&#39;</span><span class="s1">
</span><span class="s1"></span><span class="s1">98.2 27</span><span class="s1">
</span><span class="s1"></span><span class="s1">101 27</span><span class="s1">
</span><span class="s1"></span><span class="s1">102.8 29.2</span><span class="s1">
</span><span class="s1"></span><span class="s1">98.2 29.2</span><span class="s1">
</span><span class="s1"></span><span class="s1">&#39;&#39;&#39;</span> <span class="c1"># 我们先定义多边形</span>


<span class="k">def</span> <span class="nf">points</span><span class="p">(</span><span class="n">lats</span><span class="p">,</span> <span class="n">lons</span><span class="p">)</span><span class="p">:</span>
    <span class="n">pg</span> <span class="o">=</span> <span class="n">Polygon</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">genfromtxt</span><span class="p">(</span><span class="n">StringIO</span><span class="p">(</span><span class="n">poly</span><span class="p">)</span><span class="p">)</span><span class="p">)</span> <span class="c1"># 生成Polygon实例</span>
    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="p">[</span><span class="n">pg</span><span class="o">.</span><span class="n">contains</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">la</span><span class="p">)</span><span class="p">)</span> <span class="k">for</span> <span class="n">lo</span><span class="p">,</span> <span class="n">la</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">lons</span><span class="p">,</span> <span class="n">lats</span><span class="p">)</span><span class="p">]</span><span class="p">)</span> <span class="c1"># 判断所有输入的点是否在poly内，返回np.array</span>
</code></pre></td></tr></table>
</div>
</div><p>下面进行一个测试，我们定义两个点分别是<code>(28, 100)</code>和<code>(44, 120)</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="n">p</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="p">[</span><span class="p">[</span><span class="mi">28</span><span class="p">,</span> <span class="mi">100</span><span class="p">]</span><span class="p">,</span> <span class="p">[</span><span class="mi">44</span><span class="p">,</span> <span class="mi">120</span><span class="p">]</span><span class="p">]</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">points</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span><span class="p">,</span> <span class="n">p</span><span class="p">[</span><span class="p">:</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span><span class="p">)</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>结果为：</p>
<pre><code>[ True False]
</code></pre><p>这样结合<code>np.where</code>函数可以获取原先列表里在或不再多边形内的点。</p>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/seismology/">Seismology</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/geophysics/">Geophysics</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>在VSCode中使用Remote-SSH进行远程开发</title>
                <link>https://blog.xumijian.me/posts/vscode-ssh/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/vscode-ssh/</guid>
                <pubDate>Tue, 18 Jun 2019 12:30:12 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p><img src="https://microsoft.github.io/vscode-remote-release/images/ssh-readme.gif" alt="">
动图来自<a href="https://microsoft.github.io/vscode-remote-release/images/ssh-readme.gif">官网</a></p>
<h2 id="overview">Overview</h2>
<p>远程开发对于开发者尤其是Linux开发者来说是一种迫切的需求，我们所需求的远程开发工具通常需要具备以下几个功能：</p>
<ul>
<li><strong>在本地对服务器端代码进行编辑</strong></li>
<li><strong>能在本地对服务器端代码用服务器端环境进行编译和调试</strong></li>
<li><strong>代码高亮和补全要满足服务器端环境</strong></li>
<li><strong>较低的成本</strong></li>
</ul>
<p>那么现有的解决方案有以下几种：</p>
<table>
<thead>
<tr>
<th align="center">方式</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">通过终端远程登录，用<em><strong>Vim</strong></em>、<em><strong>Emacs</strong></em>等编辑。</td>
<td align="center">直接在服务器端运行易于编译调试，通过插件和配置可以获得代码高亮和补全</td>
<td align="center">Vim 没有图形化，在开发大型项目时难以使用</td>
</tr>
<tr>
<td align="center">使用<a href="http://www.jetbrains.com/">JetBrains</a>套件中的远程开发功能</td>
<td align="center">可以满足前三个功能</td>
<td align="center">太贵了，对个人用户是一个负担。而社区版则没有这个功能</td>
</tr>
<tr>
<td align="center">使用VSCode中<code>rmate</code>插件</td>
<td align="center">在VSCode中编辑服务器端文件</td>
<td align="center">只能编辑，不能编译和调试。而且使用不便。代码补全也是基于本地环境的</td>
</tr>
</tbody>
</table>
<h2 id="heading">安装</h2>
<p>好在最近有<em><strong>Microsoft</strong></em>发布的VSCode插件<a href="https://aka.ms/vscode-remote/download/extension">Remote Development</a>解决了这些问题。首先我们做一些准备工作：</p>
<ol>
<li>一台开启<code>open-ssh</code>的Linux服务器，一台可以远程登录的客户端。</li>
<li>客户端需要版本高于<code>1.35</code>的VSCode。</li>
<li>在VSCode中安装<a href="https://aka.ms/vscode-remote/download/extension">Remote Development</a></li>
</ol>
<h2 id="heading-1">配置</h2>
<p>我们需要对客户端和服务器端（不需要管理员权限）进行一些配置：</p>
<ol>
<li>客户端和服务器端需要进行公私要配对，Remote Development不支持单纯的密码登录，但密码可以作为两步认证的密码登录。</li>
<li>在<code>$HOME/.ssh/config</code>或者<code>/etc/ssh/ssh_config</code>中配置服务器名称和登录信息。在VSCode的命令板中输入<code>Remote-SSH: Open Configuration File...</code>，选择要修改的文件，打开文件后输入服务器名称和登录信息。例如：</li>
</ol>
<pre><code>Host example-remote-linux-machine
   User your-user-name-here
   HostName host-fqdn-or-ip-goes-here

Host example-remote-linux-machine-with-identity-file
   User your-user-name-on-host
   HostName another-host-fqdn-or-ip-goes-here
   IdentityFile ~/.ssh/id_rsa-remote-ssh
</code></pre><blockquote>
<p>只在自己的Mac上测试过，详细安装方法见<a href="https://code.visualstudio.com/docs/remote/ssh#_getting-started">官方文档</a></p>
</blockquote>
<h2 id="heading-2">连接服务器</h2>
<p>在命令板中输入<code>Remote-SSH: Connect to Host...</code>，然后选择配置过的服务器名就可以链接服务器。
<img src="/img/vscode-ssh/connect-cmd.png" alt=""></p>
<p>或者在左侧工具栏中找到配置过的服务器名就，右键点击连接服务器。
<img src="/img/vscode-ssh/connect-ui.png" alt=""></p>
<h2 id="heading-3">安装远程插件</h2>
<p>现在我们还没有安装远程插件，也就是说编译、调试等功能还不能在远程使用。Remote Development提供了远程插件，为SSH主机上的给定工作区安装任何所需的扩展。例如
<img src="/img/vscode-ssh/ssh-installed-remote-indicator.png" alt=""></p>
<h2 id="heading-4">使用</h2>
<p>连接服务器之后，再打开文件，这时会询问你服务器上的路径，如图
<img src="/img/vscode-ssh/enter-path.png" alt=""></p>
<p>打开项目后和本地一样设置编译器调试即可。</p>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/linux/">Linux</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/vscode/">vscode</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/ssh/">SSH</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>用FUSE和ntfs-3g在MacOS下打造免费的NTFS解决方案</title>
                <link>https://blog.xumijian.me/posts/fuse/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/fuse/</guid>
                <pubDate>Mon, 25 Mar 2019 20:55:03 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p><a href="https://www.paragon-software.com/home/ntfs-mac/">Paragon NTFS for Mac</a>和<a href="https://www.tuxera.com/products/tuxera-ntfs-for-mac/">Tuxera</a>是MacOS下常用的NTFS解决方案，但这些软件都是商业软件，而且价格不菲。这些软件除了实现NTFS的读写功能外，还有一些磁盘监测、卸载快捷键等功能，也有很好看的图形界面。但是这些额外功能对我来说都不是必须的，那么有没有一种解决方案可以免费实现最简单的NTFS读写功能呢？</p>
<p>那么这里将介绍通过FUSE和ntfs-3g实现NTFS读写功能</p>
<h2 id="fuse">FUSE</h2>
<p>FUSE源于Linux中的<a href="http://fuse.sourceforge.net/">FUSE API</a>，它提供了一个用户文件系统的超集，文件系统可以通过FUSE实现。FUSE For MacOS则是FUSE的Mac版本。ntfs-3g也基于FUSE开发，所以要先安装FUSE。
在<a href="https://osxfuse.github.io/">FUSE For MacOS</a>网站下载***.pkg***安装包，然后图形化安装即可。</p>
<h2 id="ntfs-3g">ntfs-3g</h2>
<p>ntfs-3g需要在Homebrew下安装，所以要先安装<a href="https://brew.sh/">Homebrew</a>。然后用<code>brew</code>进行安装</p>
<pre><code>brew install ntfs-3g
</code></pre><p>安装完成后重启电脑。这时我们已经可以手动挂在NTFS格式文件系统的分区了。假设想要挂在的分区为<code>/dev/disk2s1</code>，下面的命令可以把该分区以读写方式挂在到<code>/Volumes/NTFS</code>下。</p>
<pre><code>sudo mkdir /Volumes/NTFS
sudo /usr/local/bin/ntfs-3g /dev/disk1s1 /Volumes/NTFS -olocal -oallow_other
</code></pre><h2 id="ntfs">自动以读写方式挂载NTFS分区</h2>
<p>虽然我们已经可以挂载NTFS分区了，但是当我们插入一块NTFS分区的硬盘，依然只能以只读方式自动挂载。这时因为自动挂载时使用的是Mac默认的NTFS挂载命令，即<code>/sbin/mount_ntfs</code>，所以我们要将它替换成ntfs-3g的自动挂载命令。</p>
<h3 id="sip">关闭SIP</h3>
<p>Mac对操作系统下的文件采取的保护机制SIP (System Integrity Protection)，这样我们无法修改<code>/sbin</code>下的文件，所以我们要先关闭SIP。</p>
<ol>
<li>
<p>重启，按住<code>command+R</code>，进入保护模式</p>
</li>
<li>
<p>在菜单栏中打开终端，输入</p>
</li>
</ol>
<pre><code>csrutil disable
</code></pre><ol start="3">
<li>重启操作系统</li>
</ol>
<p>这时就可以修改<code>/sbin/mount_ntfs</code></p>
<h3 id="heading">替换自动挂载命令</h3>
<ul>
<li>备份之前的命令</li>
</ul>
<pre><code>sudo mv &quot;/Volumes/Macintosh HD/sbin/mount_ntfs&quot; &quot;/Volumes/Macintosh HD/sbin/mount_ntfs.orig&quot;
</code></pre><ul>
<li>将ntfs-3g中的自动挂载命令替换为自动</li>
</ul>
<pre><code>sudo ln -s /usr/local/sbin/mount_ntfs &quot;/Volumes/Macintosh HD/sbin/mount_ntfs&quot;
</code></pre><p>再次重启电脑，插入NTFS文件系统的磁盘后就可以自动读写挂载了。</p>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/mac/">Mac</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/">文件系统</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/fuse/">Fuse</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>用sshfs远程挂载路径到本地</title>
                <link>https://blog.xumijian.me/posts/sshfs/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/sshfs/</guid>
                <pubDate>Thu, 21 Mar 2019 13:54:42 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p><strong>ssh</strong>是常用的远程登陆服务，我们经常使用<strong>scp</strong>、<strong>sftp</strong>等工具与远程服务器进行文件交互。如果是常用的服务器这样工具相对麻烦，如果我们可以像打开本地文件一样打开服务器上的文件就十分方便了。<strong>sshfs可以将远程服务器上的路径作为文件系统挂载到本地。</strong></p>
<h2 id="1-sshfs">1. 安装sshfs</h2>
<p>先安装<strong>sshfs</strong>和<strong>fuse</strong></p>
<pre><code>sudo dnf install fuse sshfs
</code></pre><h2 id="2-">2. 临时挂载</h2>
<h3 id="heading">设置本地挂载路径</h3>
<p>在本地新建一个路径用于挂载，按照Linux的规则挂载路径通常在<code>/mnt</code>下。同时我们还要对新建的路径赋予用户可操作的权限。为了防止其他用户访问我们挂载的路径，这里最好选择修改权限所有者或修改ACL权限。</p>
<pre><code>sudo mkdir /mnt/xxx
sudo setfacl -m u:user:rwx /mnt/xxx
</code></pre><h3 id="heading-1">挂载远程路径</h3>
<p>下面就可以用sshfs进行挂载</p>
<pre><code>sudo sshfs -o allow_other -o reconnect -o transform_symlinks -o follow_symlinks -o cache=yes remote_user@server:/path/to/mount /mnt/xxx
</code></pre><ul>
<li><code>allow_other</code> 允许userid与服务器上userid不同的用户访问（<strong>非常重要</strong>）</li>
<li><code>reconnect</code> 断线重联</li>
<li><code>transform_symlinks</code> 表示转换绝对链接符号为相对链接符号</li>
<li><code>follow_symlinks</code> 沿用服务器上的链接符号</li>
</ul>
<h3 id="heading-2">使用公私钥对登陆</h3>
<p>这里和ssh有些不一样，我在配置了公私钥对的情况下，在尝试挂载时还是要求输入密码。所与需要在挂载时使用选项<code>-o IdentityFile=/path/to/id_rsa</code></p>
<h3 id="heading-3">卸载路径</h3>
<p>和普通的硬盘卸载一样使用</p>
<pre><code>sudo umount /mnt/xxx
</code></pre><h2 id="3-">3. 开机自动挂载</h2>
<p>开机自动挂载的方式和普通的硬盘一样在<code>/etc/fstab</code>中添加</p>
<pre><code class="language-fstab" data-lang="fstab">sshfs#xu_mijian@114.212.112.63:/path/to/mount /mnt/xxx	fuse	defaults,auto,IdentityFile=/home/user/.ssh/id_rsa,allow_other,reconnect,transform_symlinks,follow_symlinks	0	0
</code></pre><p>然后在命令行中挂载</p>
<pre><code>sudo mount -a
</code></pre>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/linux/">Linux</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/ssh/">SSH</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/linux/">Linux</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/">文件系统</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Hhkb使用心得</title>
                <link>https://blog.xumijian.me/posts/hhkb/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/hhkb/</guid>
                <pubDate>Sun, 03 Feb 2019 12:54:38 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p><img src="/img/kb/hhkb.png" alt="">
图片来自<a href="http://www.pfu.com.cn/HHKB/">HHKB官网</a></p>
<h2 id="heading">起因</h2>
<p>有一天我攒了一把客制化键盘，手感还不错，早上便拿到公司准备炫耀一把。在一家软件公司键盘的好坏就像身份地位的象征。我刚到座位上，有一位同事过来掏出一把HHKB Pro2，让我试试手感。当时虽然没用过HHKB，但其在圈内的影响力巨巨巨巨巨大，号称键盘里的橙装，所以我只好慢慢收起我的紫装。所以我立志要买一把HHKB，其实我一直没买HHKB的原因是对HHKB有些疑虑：</p>
<ol>
<li>方向键要用组合键。在公司里常用GUI IDE进行开发，所以方向键还是会经常用的。</li>
<li><code>control</code>键的位置。很多快捷键都会用到control，位置改了不知道会不会不习惯。我并不担心没有大写锁定，不写Fortran平时基本上用不到。</li>
<li><code>Esc</code>和<code>Delete</code>键的位置。这两个键影响其实较小，因为在右上角有被<code>Esc</code>替代的<code>~</code>键，对于一个类Unix重度依赖者来说这很重要。这也是为什么我不会买GK64的原因。</li>
</ol>
<p>这是我的一些疑虑，其他朋友还有一些其他的疑虑：</p>
<ol>
<li>没有F区</li>
<li>没有小键盘数字键</li>
<li>手感不习惯</li>
</ol>
<h2 id="heading-1">体验</h2>
<p>终于在深思熟虑半年后，入手了HHKB Pro BT，有让我很惊艳的地方也有些让我不满意的地方。</p>
<h3 id="heading-2">优点</h3>
<ol>
<li>
<p>手感很优秀，这里说的手感优秀不是说塔它比某个机械轴或者比某个机械键盘好用，毕竟手感各有所爱，现在用HHKB时间多了之后也会换机械键盘，换换口味。这里说的优秀是指HHKB可以吧每个按键的手感都做到几乎一样，这很不容易，尤其是大键。我们知道对机械键盘，为了让大键的手感不肉，会对卫星轴进行一系列调教，就算这样也不能完全保证每个键的手感一致。但HHKB作为一个工业级产品做到这一点很不容易。</p>
</li>
<li>
<p>配列非常合理，这里其实就解决了之前的所有疑惑。先说下我的使用环境：</p>
<ul>
<li>操作系统：MacOS和Linux</li>
<li>常用软件：Vim, Pycharm, VSCode，Terminal和Word
<img src="/img/kb/keymap.png" alt=""></li>
</ul>
</li>
</ol>
<ul>
<li>
<p>不得不说HHKB对MacOS的支持相当的好，<code>cmd</code>和<code>opt</code>的位置和mac原生键盘的一样，对于一个Mac用户来说不会有任何不适应。相反，对于Win用户来说可能就需要适应一下了。对于Linux，首先如果不用图形化那就没有任何影响，如果用图形化的话键位都可以自定义，我把Gnome的快捷键都改成和Mac一样了。</p>
</li>
<li>
<p>再来解释几个键位和在不同IDE中使用的问题。</p>
<ul>
<li>方向键问题：
<ul>
<li>
<p>Vim里不需要方向键。</p>
</li>
<li>
<p>通过<code>fn</code>+<code>[</code>, <code>/</code>, <code>;</code>, <code>'</code>实现⬆️，⬇️，⬅️，➡️比想象中要省劲，只要不是游戏中的操作，对于光标定位来说还是很简单的。</p>
</li>
<li>
<p>Mac自带Emacs的光标定位快捷键，Linux一样也可以改。而对于Mac终端和Gnome终端，都默认这些快捷键。</p>
<table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><code>Ctrl</code>+<code>p</code>| ⬆️</td>
<td></td>
</tr>
<tr>
<td align="center"><code>Ctrl</code>+<code>n</code>| ⬇️</td>
<td></td>
</tr>
<tr>
<td align="center"><code>Ctrl</code>+<code>b</code>| ⬅️</td>
<td></td>
</tr>
<tr>
<td align="center"><code>Ctrl</code>+<code>f</code>| ➡️</td>
<td></td>
</tr>
<tr>
<td align="center"><code>Ctrl</code>+<code>a</code>|<code>Home</code>|</td>
<td></td>
</tr>
<tr>
<td align="center"><code>Ctrl</code>+<code>e</code>|<code>End</code>|</td>
<td></td>
</tr>
</tbody>
</table>
<p>这种替代也有好有坏，好处是在进行光标定位时手几乎不需要离开字母区，熟练的情况下效率很高。坏处是如果在用这个键盘之前不是Emacs用户还是有一定学习成本的。如果不会盲打，这种操作简直就是噩梦。</p>
</li>
<li>
<p>Pycharm, VSCode（包括 Vim）等IDE都可以修改键盘映射，可以修改成上述映射，或者用<code>fn</code>+<code>[</code>, <code>/</code>, <code>;</code>, <code>'</code>，也不麻烦。</p>
</li>
<li>
<p>Word好像不能修改键盘映射，只能用<code>fn</code>组合键。所以我的替代方案是不用Word，完全使用Markdown和Latex</p>
</li>
</ul>
</li>
<li><code>Control</code>键的位置是比较惊艳的，这比在左下角的<code>Control</code>按上去要舒服很多，所以适应这个键位不是什么问题，<code>Delete</code>的位置也是一样。</li>
</ul>
</li>
</ul>
<h3 id="heading-3">缺点</h3>
<ul>
<li>
<p><strong>我不应该买蓝牙版</strong>，看看大F的蓝牙版以及那些薄膜键盘的蓝牙版，多设备之间一键切换。而HHKB要先按<code>fn</code>+<code>q</code>进入设备搜索模式，与当前设备断开，再在另一台设备上选择HHKB点连接，才能完成切换。而且键盘有时会断联，我不清楚这是电脑的问题还是键盘的问题。但如果是有线的就不会有这些问题无疑。</p>
</li>
<li>
<p>不会盲打，而且不想学盲打的同学就别买了。由于键位的改变很多组合键需要低头找，就很影响效率。</p>
</li>
<li>
<p>可玩性不高，除了换换键帽没什么可玩性，毕竟这只是一个生产力工具，想玩键盘还是客制化比较好玩。</p>
</li>
</ul>
<h2 id="heading-4">总结</h2>
<p>网上很多人对HHKB的评价褒贬不一，我是非常能理解的。但只是对于一个不用Windows、常用命令行的码农来说还是很适合的。</p>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/keyboard/">keyboard</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/hhkb/">hhkb</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>机械键盘轴体小记（一）：Cherry</title>
                <link>https://blog.xumijian.me/posts/mech-kb/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/mech-kb/</guid>
                <pubDate>Fri, 01 Feb 2019 17:57:29 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p><img src="/img/kb/teaser.jpg" alt=""></p>
<p>Varmilo VA88M 双彩虹RGB，来自<a href="https://www.cherrymx.de/en/blog/VARMILO-VA88M-DOUBLE-RAINBOW-RGB-INTRODUCTION.html">Cherry官方博客</a>。</p>
<p>Cherry轴是我最早接触到的机械键盘轴，大概在13-14年，那时候国产轴好像只有冠泰和凯华，而且质量、手感和做工远不如Cherry。所以这就给我留下了一个Cherry是最好的机械键盘轴的印象。但是在近几年一切都变了，各种客制化轴如雨后春笋般出现，弥补了Cherry的各种不足。不过作为对比的基础还是先来看看CHerry轴。</p>
<p><strong>声明</strong>：所有的图片和参数均来自官方网站，如有偏差已官网为准。</p>
<h2 id="mx-black">MX BLACK（黑轴）</h2>
<p>我最不喜欢的轴，实在太重了。事实上我自己没有买过黑轴的键盘。最早在选择第一把键盘的时候，得知黑轴最适合打游戏，我的第一反应就是这一定不适合我。后来用过同事的黑轴键盘发现自己确实不喜欢。至于它在游戏方面有哪些又是我也不知道，因为自己确实不玩游戏，对我来说所有的键盘玩游戏都是一样的。</p>
<p>所以这里只发表对于打字的看法。这应该是最不适合打字的轴了，从键程-压力图上看，在60 cN（厘牛）触发后到触底还要持续加20 cN的力（触底 80 cN）。这对于需要持续性的打字工作就很不友好，用不了多长时间就累了。而且黑轴没有段落感，也就是说打字时没有确认感，为了保证触发通常都要触底。可以想像真的会很累。</p>
<table>
<td><center><img style="width:250px;height:250px" src="/img/kb/GIF_MXStd_Black_v004.gif"/></center></td>
<td><center><img style="width:300px;height:300px" src="/img/kb/img-graph-mxBlack.svg"/></center></td>
</table>
<table>
<thead>
<tr>
<th>项目</th>
<th align="center">数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>轴体类型</td>
<td align="center">线性轴体</td>
</tr>
<tr>
<td>触发压力</td>
<td align="center">60 cN</td>
</tr>
<tr>
<td>触发键程</td>
<td align="center">2.0 mm</td>
</tr>
<tr>
<td>总键程</td>
<td align="center">4.0 mm</td>
</tr>
<tr>
<td>声音</td>
<td align="center">无声</td>
</tr>
</tbody>
</table>
<h2 id="mx-red">MX RED（红轴）</h2>
<p>从键程-压力图上可以看出来，红轴手感和黑轴类似。但减小了压力（触发压力45 cN，触底压力60 cN）。这样一来打字就比黑轴舒服很多，红轴和黑轴都是线性轴所以打字时基本上都会触底，所以红轴触底压力小的优势就体现出来了。</p>
<p>对于我来说，我个人还是很喜欢红轴或类红轴的这种线性小压力轴的，打字不累触底的声音也很好听。</p>
<table>
<td><center><img style="width:250px;height:250px" src="/img/kb/GIF_MXStd_Red_v004.gif"/></center></td>
<td><center><img style="width:300px;height:300px" src="/img/kb/img-graph-mxRed.svg"/></center></td>
</table>
<table>
<thead>
<tr>
<th>项目</th>
<th align="center">数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>轴体类型</td>
<td align="center">线性轴体</td>
</tr>
<tr>
<td>触发压力</td>
<td align="center">45 cN</td>
</tr>
<tr>
<td>触发键程</td>
<td align="center">2.0 mm</td>
</tr>
<tr>
<td>总键程</td>
<td align="center">4.0 mm</td>
</tr>
<tr>
<td>声音</td>
<td align="center">无声</td>
</tr>
</tbody>
</table>
<h2 id="mx-brown">MX BROWN（茶轴）</h2>
<p>茶轴和青轴都有段落感，为什么要有段落感呢。我对这个问题的认知也经历的一个过程：最早相信所有人和我一样接触的都是薄膜键盘，薄膜键盘由于橡胶碗的存在都会有一定的段落感。所以最早我认为茶轴是模仿薄膜键盘的手感。哎，年轻的时候真的很愚蠢。后来才知道段落感是为了让用户在敲击时有确认感，也就是说当用户感受到段落使就说明这次敲击触发了，也样理论上来说用户不需要在每次敲击时触底，这样就可以加快打字速度。但很遗憾的是，这只是理论上的，实际上茶轴的段落感很小，触底压力也只有60 cN，我基本上都是触底敲击的。</p>
<p>其实我还是很喜欢类茶轴的，触底压力不大也有一些段落感。但是我不喜欢Cherry茶轴，具体原因就等到我以后谈我最喜欢的段落轴时再说吧。</p>
<table>
<td><center><img style="width:250px;height:250px" src="/img/kb/GIF_MXBrown_v004.gif"/></center></td>
<td><center><img style="width:300px;height:300px" src="/img/kb/img-graph-maxBrown.svg"/></center></td>
</table>
<table>
<thead>
<tr>
<th>项目</th>
<th align="center">数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>轴体类型</td>
<td align="center">段落轴体</td>
</tr>
<tr>
<td>触发压力</td>
<td align="center">55 cN</td>
</tr>
<tr>
<td>触发键程</td>
<td align="center">2.0 mm</td>
</tr>
<tr>
<td>总键程</td>
<td align="center">4.0 mm</td>
</tr>
<tr>
<td>声音</td>
<td align="center">无声</td>
</tr>
</tbody>
</table>
<h2 id="mx-blue">MX BLUE（青轴）</h2>
<p>青轴是我刚开始玩键盘时最喜欢的轴，我一次买键盘时看网上都说青轴适合打字就买了。第一次用青轴的感觉还是很好的，毕竟长时间使用薄膜键盘，开始敲青轴真的很美妙。但时间不长后我就开始厌倦青轴了，发现它其实并不适合我。原因有一下两点：</p>
<ol>
<li>60 cN的触发压力有点大，打字手会累。虽然青轴的触底压力和红轴茶轴都差不多，但青轴在1.75 mm的键程内就要花60 cN，红轴在4 mm的键程内才花60 cN。我想这是我觉得手累的原因吧。</li>
<li>声音太大，我经常看其他网友的评论说：“不要怂，把室友怼回去”之类的。我只想说：“这些没上过班的小孩”。事实上，扰民只是我不喜欢青轴的一个理由，更重要的是我自己也受不了这些噪声，十分影响自己写代码和写作的思路。</li>
</ol>
<p>当然，这只是我对Cherry的感受，现在很多类青轴都比Cherry要舒服，至于声音，相信很多人都还是很喜欢的。</p>
<table>
<td><center><img style="width:250px;height:250px" src="/img/kb/GIF_MXBlue_v004.gif"/></center></td>
<td><center><img style="width:300px;height:300px" src="/img/kb/img-graph-mxBlue.svg"/></center></td>
</table>
<table>
<thead>
<tr>
<th>项目</th>
<th align="center">数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>轴体类型</td>
<td align="center">段落轴体</td>
</tr>
<tr>
<td>触发压力</td>
<td align="center">60 cN</td>
</tr>
<tr>
<td>触发键程</td>
<td align="center">2.2 mm</td>
</tr>
<tr>
<td>总键程</td>
<td align="center">4.0 mm</td>
</tr>
<tr>
<td>声音</td>
<td align="center">有声</td>
</tr>
</tbody>
</table>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/keyboard/">keyboard</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/keyboard/">keyboard</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Mpipool Mpi4py</title>
                <link>https://blog.xumijian.me/posts/mpipool-mpi4py/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/mpipool-mpi4py/</guid>
                <pubDate>Thu, 03 Jan 2019 13:31:58 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p><a href="http://mpi4py.readthedocs.io/en/stable/index.html">mpi4py</a> is a python API for MPI. <strong>MPIPoolExecutor</strong> is a subclass of <code>mpi4py.futures</code> to create MPI processes to execute calls asynchronously</p>
<blockquote>
<p>The <strong>MPIPoolExecutor</strong> class uses a pool of MPI processes to execute calls asynchronously. By performing computations in separate processes, it allows to side-step the <a href="https://docs.python.org/3/glossary.html#term-global-interpreter-lock">Global Interpreter Lock</a> but also means that only picklable objects can be executed and returned. The <code>__main__</code> module must be importable by worker processes</p>
</blockquote>
<h2 id="test-script">Test Script</h2>
<p>The test script shows a way to calculate $2^{x}$ in a loop</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">mpi4py.futures</span> <span class="kn">import</span> <span class="n">MPIPoolExecutor</span>

<span class="n">executor</span> <span class="o">=</span> <span class="n">MPIPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
<span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">executor</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="nb">pow</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="mi">32</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="p">)</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>executor</code> is an instance of <code>MPIPoolExecutor</code> with <code>max_workers</code> of 100</li>
<li>Calculate $2^x$ in a <code>map</code> where $x$ set from 0 to 31</li>
</ul>
<h2 id="time-length-running">Time length running</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">starttime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="p">)</span>
<span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="o">.</span><span class="o">.</span>
<span class="n">endtime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">Running for </span><span class="si">%6.3f</span><span class="s1">s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">endtime</span> <span class="o">-</span> <span class="n">starttime</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="run-this-script-via-mpiexec">Run this script via mpiexec</h2>
<p>script for MPIPoolExecutor could run via mpiexec in <a href="http://mpi4py.readthedocs.io/en/stable/mpi4py.futures.html#command-line">command line</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mpiexec -n <span class="m">100</span> python -m mpi4py.futures MpiPool.py
</code></pre></td></tr></table>
</div>
</div><p>the script would be execute with 100 cores</p>
<h2 id="comparision">Comparision</h2>
<ul>
<li><strong>2.7007s</strong> running with 1 core</li>
<li><strong>0.1527s</strong> running with 100 core</li>
</ul>
<h2 id="test-script-1">Test script</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Python" data-lang="Python"><span class="kn">from</span> <span class="nn">mpi4py.futures</span> <span class="kn">import</span> <span class="n">MPIPoolExecutor</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">__main__</span><span class="s1">&#39;</span><span class="p">:</span>
    <span class="n">executor</span> <span class="o">=</span> <span class="n">MPIPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">starttime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">executor</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="nb">pow</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="mi">32</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="p">)</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="n">endtime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">Running for </span><span class="si">%6.3f</span><span class="s1">s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">endtime</span> <span class="o">-</span> <span class="n">starttime</span><span class="p">)</span>

</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/python/">Python</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/python/">Python</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/mpi/">Mpi</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Vim 使用笔记</title>
                <link>https://blog.xumijian.me/posts/vim-intro/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/vim-intro/</guid>
                <pubDate>Wed, 01 Nov 2017 14:21:22 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<h2 id="heading">目录</h2>
<ul>
<li><strong><a href="#command-mode">Command Mode</a></strong>
<ul>
<li><a href="#cursor-motions">Cursor Motions</a></li>
<li><a href="#edit-command">Edit Command</a></li>
<li><a href="#window-motion">Window Motion</a></li>
</ul>
</li>
<li><strong><a href="#insert-mode">Insert Mode</a></strong></li>
<li><strong><a href="#visual-mode">Visual Mode</a></strong></li>
<li><strong><a href="#search-and-replace">Search and Replace</a></strong>
<ul>
<li><a href="#basic-usage">Basic usage</a></li>
<li><a href="#replace">Replace</a></li>
<li><a href="#regular-expression">Regular Expression</a></li>
<li><a href="#vim-%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9B%BF%E6%8D%A2%E8%A1%A8%E8%BE%BE%E5%BC%8F">Vim 中常用的替换表达式</a></li>
</ul>
</li>
<li><strong><a href="#ctags-and-taglist">Ctags and Taglist</a></strong>
<ul>
<li><a href="#ctags-configure">Ctags Configure</a></li>
<li><a href="#pythontag">为Python标准库添加标签</a></li>
<li><a href="#systag">为C/C++系统函数添加标签</a></li>
<li><a href="#taglist-configure">Taglist Configure</a></li>
</ul>
</li>
</ul>
<h2 id="command-mode">Command Mode</h2>
<h3 id="cursor-motions">Cursor Motions</h3>
<ul>
<li><code>^</code>: 回到行首</li>
<li><code>$</code>: 回到行尾</li>
<li><code>l</code>: 向前移动一个单词</li>
<li><code>w</code>: 向后移动一个单词</li>
</ul>
<blockquote>
<p>Note: <code>w</code>通常表示一个单词，如<code>dw</code>删除一个单词， <code>yw</code>复制一个单词，<code>cw</code>替换一个单词。</p>
</blockquote>
<h3 id="edit-command">Edit Command</h3>
<h4 id="deletion">Deletion</h4>
<ul>
<li><code>x</code>: 删除一个字符</li>
<li><code>dd</code>: 删除一行</li>
<li><code>ndd</code>: 删除n行</li>
<li><code>dw</code>: 删除一个单词</li>
<li><code>D</code>: 删除至行尾</li>
</ul>
<blockquote>
<p>Note: 这里的删除类似于剪切，可以粘贴。</p>
</blockquote>
<h4 id="copy-and-paste">Copy and Paste</h4>
<ul>
<li><code>yy</code>: 复制一行</li>
<li><code>yw</code>: 复制一个单词</li>
<li><code>p</code>: 在光标后复制</li>
<li><code>P</code>: 在 光标前复制</li>
</ul>
<h4 id="undo-and-redo">Undo and Redo</h4>
<ul>
<li><code>u</code>: 撤销</li>
<li><code>&lt;ctrl&gt;r</code>: 恢复</li>
</ul>
<h3 id="window-motion">Window Motion</h3>
<ul>
<li><code>&lt;ctrl&gt;f</code> or <code>&lt;Page Down&gt;</code>: 向下翻页</li>
<li><code>&lt;ctrl&gt;b</code> or <code>&lt;Page Up&gt;</code>: 向上翻页</li>
<li><code>&lt;ctrl&gt;d</code>: 下滚（向下翻半页）</li>
<li><code>&lt;ctrl&gt;u</code>: 上滚（向上翻半页）</li>
<li><code>G</code>: 定位文件最后一行</li>
<li><code>:n</code>: 定位到第n行</li>
</ul>
<h2 id="insert-mode">Insert Mode</h2>
<ul>
<li><code>a</code>: 光标后插入</li>
<li><code>i</code>: 光标前插入</li>
<li><code>:r file</code>: 在当前行之后插入文件内容</li>
</ul>
<h2 id="visual-mode">Visual Mode</h2>
<ul>
<li><code>v</code>: 进入可视模式</li>
<li><code>V</code>: 进入可视行模式</li>
<li><code>&lt;ctrl&gt;v</code>: 进入可视块模式</li>
</ul>
<h2 id="search-and-replace">Search and Replace</h2>
<h3 id="basic-usage">Basic usage</h3>
<ol>
<li>在Command Mode 下输入<code>/xxxx</code> 后按<code>&lt;Enter&gt;</code>可在光标后搜索内容为xxxx的字段。</li>
<li><code>n</code>: 跳转下一个字段，<code>N</code>: 跳转上一个字段。</li>
</ol>
<h3 id="replace">Replace</h3>
<pre><code>Syntax:[addr]s/源字符串/目的字符串/[option]
</code></pre><ul>
<li><code>addr</code>: 表示搜索范围</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code>| 当前行</td>
<td></td>
</tr>
<tr>
<td><code>n</code>| 第n行</td>
<td></td>
</tr>
<tr>
<td><code>$</code>| 最后一行</td>
<td></td>
</tr>
<tr>
<td><code>%</code>| 全文</td>
<td></td>
</tr>
<tr>
<td>[addr1],[addr2]</td>
<td align="center">指定一个范围</td>
</tr>
</tbody>
</table>
<blockquote>
<p>我们常用的范围有<code>%</code>（全文），<code>n1,n2</code>（从第n1行到n2行）。</p>
</blockquote>
<ul>
<li><code>option</code></li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>g</code>| 全局替换</td>
<td></td>
</tr>
<tr>
<td><code>c</code>| 替换时进行确认</td>
<td></td>
</tr>
<tr>
<td><code>i</code>| 忽略大小写</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="regular-expression">Regular Expression</h3>
<p>正则表达式是一种<strong>按一定规则匹配一系列文本</strong>的字符串表达式。</p>
<blockquote>
<p>&quot;正则表达式是烦琐的，但它是强大的，学会之后的应用会让你除了提高效率外，会给你带来绝对的成就感。&rdquo;</p>
</blockquote>
<p>这里推荐一个网站来学习正则表达式：<a href="http://www.runoob.com/regexp/regexp-tutorial.html">http://www.runoob.com/regexp/regexp-tutorial.html</a>
Vim中的搜索和替换同样支持正则表达式。大部分语法与其他正则表达式语法相同，但有一小部分略有区别。这里列出一些规则供参考。</p>
<ul>
<li>元字符</li>
</ul>
<table>
<thead>
<tr>
<th>模式</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td align="center">匹配任意字符</td>
</tr>
<tr>
<td><code>[abc]</code>| 匹配方括号中的任意一个字符，可用-表示字符范围。如<code>[a-z0-9]</code>匹配小写字母和数字</td>
<td></td>
</tr>
<tr>
<td><code>[^abc]</code>| 匹配除方括号中字符之外的任意字符</td>
<td></td>
</tr>
<tr>
<td><code>\d </code>| 匹配阿拉伯数字，等同于<code>[0-9]</code></td>
<td></td>
</tr>
<tr>
<td><code>\D </code>| 匹配阿拉伯数字之外的任意字符，等同于<code>[^0-9]</code></td>
<td></td>
</tr>
<tr>
<td><code>\x</code></td>
<td align="center">匹配十六进制数字，等同于<code>[0-9A-Fa-f]</code></td>
</tr>
<tr>
<td><code>\X</code>| 匹配十六进制数字之外的任意字符，等同于<code>[^0-9A-Fa-f]</code></td>
<td></td>
</tr>
<tr>
<td><code>\l</code>| 匹配<code>[a-z]</code></td>
<td></td>
</tr>
<tr>
<td><code>\L</code>| 匹配<code>[^a-z]</code></td>
<td></td>
</tr>
<tr>
<td><code>\u</code>| 匹配<code>[A-Z]</code></td>
<td></td>
</tr>
<tr>
<td><code>\U</code>| 匹配<code>[^A-Z]</code></td>
<td></td>
</tr>
<tr>
<td><code>\w</code>| 匹配单词字母，等同于<code>[0-9A-Za-z_]</code></td>
<td></td>
</tr>
<tr>
<td><code>\W</code>| 匹配单词字母之外的任意字符，等同于<code>[^0-9A-Za-z_]</code></td>
<td></td>
</tr>
<tr>
<td><code>\t</code>| 匹配<code>&lt;tab&gt;</code>字符</td>
<td></td>
</tr>
<tr>
<td><code>\s</code>| 匹配空白字符，等同于<code>[\t]</code></td>
<td></td>
</tr>
<tr>
<td><code>\S</code>| 匹配非空白字符，等同于<code>[^\t]</code></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>普通字符需转意</li>
</ul>
<table>
<thead>
<tr>
<th>模式</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\*</code>| 匹配<code>*</code>字符</td>
<td></td>
</tr>
<tr>
<td><code>\.</code>| 匹配<code>.</code> 字符</td>
<td></td>
</tr>
<tr>
<td><code>\/</code>| 匹配 <code>/</code> 字符</td>
<td></td>
</tr>
<tr>
<td><code>\\</code>|  匹配 <code>\</code> 字符</td>
<td></td>
</tr>
<tr>
<td><code>\[</code>| 匹配 <code>[</code> 字符</td>
<td></td>
</tr>
<tr>
<td><code>\]</code>| 匹配 <code>]</code> 字符</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>表示数量的元字符</li>
</ul>
<table>
<thead>
<tr>
<th>模式</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code>| 匹配0-任意个</td>
<td></td>
</tr>
<tr>
<td><code>\+</code>| 匹配1-任意个</td>
<td></td>
</tr>
<tr>
<td><code>\?</code>| 匹配0-1个</td>
<td></td>
</tr>
<tr>
<td><code>\{n,m}</code>| 匹配n-m个</td>
<td></td>
</tr>
<tr>
<td><code>\{n}</code>|   匹配n个</td>
<td></td>
</tr>
<tr>
<td><code>\{n,}</code>|  匹配n-任意个</td>
<td></td>
</tr>
<tr>
<td><code>\{,m}</code>| 匹配0-m个</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>表示位置的元字符</li>
</ul>
<table>
<thead>
<tr>
<th>模式</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$</code>| 匹配行尾</td>
<td></td>
</tr>
<tr>
<td><code>^</code>|  匹配行首</td>
<td></td>
</tr>
<tr>
<td><code>\&lt; </code>| 匹配单词词首</td>
<td></td>
</tr>
<tr>
<td><code>\&gt;</code>| 匹配单词词尾</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="vim-">Vim 中常用的替换表达式</h3>
<h4 id="heading-1">简单替换表达式</h4>
<ul>
<li>替换命令可以在全文中用一个单词替换另一个单词：</li>
</ul>
<pre><code>:%s/four/4/g
</code></pre><ul>
<li>如果你有一个象 &ldquo;thirtyfour&rdquo; 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成&quot;thirty4&rdquo;。要解决这个问题，用 &ldquo;&lt;&rdquo; 来指定匹配单词开头：</li>
</ul>
<pre><code>:%s/\&lt;four/4/g
</code></pre><ul>
<li>显然，这样在处理 &ldquo;fourty&rdquo; 的时候还是会出错。用 &ldquo;&gt;&rdquo; 来解决这个问题：</li>
</ul>
<pre><code>:%s/\&lt;four\&gt;/4/g
</code></pre><ul>
<li>如果你在编码，你可能只想替换注释中的 &ldquo;four&rdquo;，而保留代码中的。由于这很难指定，可以在替换命令中加一个 &ldquo;c&rdquo; 标记，这样，Vim 会在每次替换前提示你：</li>
</ul>
<pre><code>:%s/\&lt;four\&gt;/4/gc
</code></pre><h4 id="heading-2">删除多余的空格</h4>
<ul>
<li>要删除这些每行后面多余的空格，可以执行如下命令：
<code>:%s/\s\+$//</code>
匹配模式为<code>\s\+$</code>，这表示行末（<code>$</code>）前的一个或者多个（<code>\+</code>）空格（<code>\s</code>）。替换命令的部分是空的：<code>//</code>。</li>
</ul>
<h4 id="heading-3">匹配重复性</h4>
<ul>
<li>星号项 <code>*</code> 规定在它前面的项可以重复任意次。因此:\</li>
</ul>
<pre><code>/a*
```\\
匹配 &quot;a&quot;，&quot;aa&quot;，&quot;aaa&quot;，等等。但也匹配 &quot;&quot; (空字串)，因为零次也包含在内。星号 `*` 仅仅应用于那个紧邻在它前面的项。因此 `ab*` 匹配 &quot;a&quot;，&quot;ab&quot;，&quot;abb&quot;,&quot;abbb&quot;，等等。如要多次重复整个字符串，那么该字符串必须被组成一个项。组成一项的方法就是在它前面加 `\(`，后面加 `\)`。因此这个命令:\\
</code></pre><p>/(ab)*</p>
<pre><code class="language-\\" data-lang="\\">匹配: &quot;ab&quot;，&quot;abab&quot;，&quot;ababab&quot;，等等。而且也匹配 &quot;&quot;。要避免匹配空字串，使用 `\+`。这表示前面一项可以被匹配一次或多次。\\
</code></pre><p>/ab+</p>
<pre><code class="language-\\" data-lang="\\">匹配 &quot;ab&quot;，&quot;abb&quot;，&quot;abbb&quot;，等等。它不匹配 后面没有跟随 &quot;b&quot; 的 &quot;a&quot;。

#### 指定重复次数
- 要匹配某一项的特定次数重复，使用 `\{n,m}` 这样的形式。其中 &quot;n&quot; 和 &quot;m&quot; 都是数字。在它前面的那个项将被重复 &quot;n&quot; 到 &quot;m&quot; 次 (包含 &quot;n&quot; 和 &quot;m&quot;)。例如:\\
</code></pre><p>/ab{3,5}</p>
<pre><code class="language-\\" data-lang="\\">匹配 &quot;abbb&quot;，&quot;abbbb&quot; 以及 &quot;abbbbb&quot;。
当 &quot;n&quot; 省略时，被默认为零。当 &quot;m&quot; 省略时，被默认为无限大。当 &quot;,m&quot; 省略时，就表示重复正好 &quot;n&quot; 次。例如:

| 模式          | 匹配次数		|
| ------------- |:-------------:|
| `\{,4}`      |  0，1，2，3 或 4 |
| `\{3,}`       | 3，4，5，等等   |  
|   `\{0,1}`      |   0 或 1      |
|  `\{0,}`     |    0 或 更多，同 *
|`\{1,}`      |    1 或 更多，同 \+
|    `\{3}`       |    3


#### 多选一匹配
- 在一个查找模式中，&quot;或&quot; 运算符是 `\\|`。例如:\\
</code></pre><p>/foo|bar</p>
<pre><code class="language-\\" data-lang="\\">这个命令匹配了 `foo` 或 `bar`。更多的抉择可以连在后面:\\
</code></pre><p>/one|two|three</p>
<pre><code class="language-\\" data-lang="\\">匹配 `one`，`two` 或 `three`。
如要匹配其多次重复，那么整个抉择结构须置于 `\(` 和 `\)` 之间:\\
</code></pre><p>/(foo|bar)+</p>
<pre><code class="language-\\" data-lang="\\">这个命令匹配 `foo`，`foobar`，`foofoo`，`barfoobar`，等等。

#### 变量替换
- 置于 `\(` 和 `\)` 之间的字符串可以作为变量在替换是引用，例如`xxxx this is that xxxx`，我们想将这段文本中的`this`和`that`进行换位变成`xxxx that is this xxxx`，Vim的替换命令应该这样写：`:.s/\( this \) is \(that\)/\2 is \1/`
其中`\1`表示`this`，`\2`表示`that`。


## Ctags and Taglist
Ctags可以定义项目目录下的文件所包含的结构体、函数类型、变量类型、函数名所在位置，并可以他们之间跳转。
### Ctags Configure
1. 在项目目录下生成tags文件，文件记录了函数、变量等的位置和类型。\\
</code></pre><p>cd /path/to/project
ctags -R *</p>
<pre><code>2. 在`~/.vimrc`中设置\\
</code></pre><p>set tags=tags</p>
<pre><code>3. 打开项目中的文件
- `&lt;ctrl&gt;]`: 进入光标所指的标识符的定义
- `&lt;ctrl&gt;t`: 回到前一个标签处

&lt;h1 id=&quot;pythontag&quot;&gt;&lt;/h1&gt;

### 为Python标准库添加标签
1. 假设Python标准库的位置是`/usr/lib/python3.6`\\
</code></pre><p>ctags -R -f ~/.python.tags /usr/lib/python3.6</p>
<pre><code>2. 在`~/.vimrc`中添加设置\\
</code></pre><p>set tags+=~/.python.tags</p>
<pre><code>
&lt;h2 id=&quot;systag&quot;&gt;&lt;/h2&gt;

### 为C/C++系统函数添加标签
1. 设置系统头文件标签\\
</code></pre><p>ctags -R -f ~/.sys.tags /usr/include /usr/local/include</p>
<pre><code>2. 在`~/.vimrc`中添加设置\\
</code></pre><p>set tags+=~/.sys.tags</p>
<pre><code>
### Taglist Configure
1. 安装Taglist，在[Taglist](http://vim-taglist.sourceforge.net/)官网下载插件，并解压到`~/.vim/`目录中，保证该目录下存在：\\
</code></pre><p>plugin/taglist.vim
doc/taglist.txt</p>
<pre><code>2. 打开项目中的文件，在Command Mode下输入\\
</code></pre><p>:Tilst</p>
<pre><code>3. Taglist中常用快捷键

|   命令    |   功能   |
|----------|:---------:|
|   `&lt;ctrl&gt;ww` |在文本窗口和Taglist窗口间切换
| `o` |在一个新打开的窗口中显示光标下tag
| `s` |更改排序方式，在按名字排序和按出现顺序排序间切换
| `+` |打开一个折叠，同zo
| `-` |将tag折叠起来，同zc
| `*` |打开所有的折叠，同zR
|`=`  |将所有tag折叠起来，同zM
|`[[` | 跳到前一个文件
|`]]` | 跳到后一个文件
|`q`  |关闭taglist窗口
</code></pre>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/linux/">Linux</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/development/">Development</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/vim/">Vim</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>配置Vim开发环境</title>
                <link>https://blog.xumijian.me/posts/vim-plugin/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/vim-plugin/</guid>
                <pubDate>Sun, 29 Oct 2017 21:51:29 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p>配置一个优秀个开发环境可以极大地提高开发效率，在Linux里Vim是最常用的开发环境之一（emacs也是相当不错的，但鄙人是Vim的忠实粉丝），我们一般所说的开发环境包括了</p>
<ul>
<li>代码高亮</li>
<li>文件树</li>
<li>配色方案</li>
<li>自动缩进</li>
<li>代码补全</li>
</ul>
<p>这里就Linux中配置这些功能做一个简单的介绍</p>
<p>Vim中配置这些功能主要分为两种方式：1. 安装插件; 2. 修改配置文件。所以第一件事就是安装插件管理器，因为以后所有的插件都将通过它来安装</p>
<h2 id="vundle">插件管理器：vundle</h2>
<p>vim中很多软件可以通过vundle安装，简化了插件的安装过程，vundle的安装也十分简单。</br>
项目主页：<a href="https://github.com/VundleVim/Vundle.vim">https://github.com/VundleVim/Vundle.vim</a></p>
<h3 id="vundle-1">安装vundle</h3>
<p>在命令行中输入</p>
<pre><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre><h3 id="vundle-2">配置vundle</h3>
<p>在<code>~/.vimrc</code>文件顶部输入一下代码，配置vundle</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Vim" data-lang="Vim"><span class="nx">set</span> <span class="nx">nocompatible</span>              <span class="c">&#34; be iMproved, required</span><span class="err">
</span><span class="err"></span><span class="nx">filetype</span> <span class="nx">off</span>                  <span class="c">&#34; required</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; set the runtime path to include Vundle and initialize</span><span class="err">
</span><span class="err"></span><span class="nx">set</span> <span class="nx">rtp</span><span class="p">+</span><span class="p">=</span><span class="p">~</span><span class="sr">/.vim/</span><span class="nx">bundle</span>/<span class="nx">Vundle</span>.<span class="nx">vim</span><span class="err">
</span><span class="err"></span><span class="nx">call</span> <span class="nx">vundle</span>#<span class="nx">begin</span><span class="p">(</span><span class="p">)</span><span class="err">
</span><span class="err"></span><span class="nx">Plugin</span> <span class="s1">&#39;VundleVim/Vundle.vim&#39;</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; 这里放置其他插件</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 格式为 Plugin &#39;username/Plugin_name&#39;</span><span class="err">
</span><span class="err"></span><span class="err">
</span><span class="err"></span><span class="nx">call</span> <span class="nx">vundle</span>#<span class="nx">end</span><span class="p">(</span><span class="p">)</span>            <span class="c">&#34; required</span><span class="err">
</span><span class="err"></span><span class="nx">filetype</span> <span class="nx">plugin</span> <span class="nx">indent</span> <span class="nx">on</span>    <span class="c">&#34; required</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="heading">安装插件</h3>
<p>在刚才输入的代码段<code>call vundle#begin()</code>和<code>call vundle#end() </code>之间放置插件，插入以下代码。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="nx">Plugin</span> <span class="s1">&#39;git_name/plugin_name&#39;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note: <code>git_name</code>是该插件github的用户名，<code>plugin_name</code>是该插件github的项目名，通常就是插件的名字。
如果这里不写<code>git_name</code>，vundle默认在<a href="https://github.com/vim-scripts">vim-scripts</a>用户中搜索插件。</p>
</blockquote>
<p>然后进入Command Mode输入（按Esc键）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="nx">PluginInstall</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>vundle会自动下载安装之前写在<code>~/.vimrc</code>中的插件。</p>
<h2 id="nerdtree">文件树形结构插件：NERDTree</h2>
<p>NERDTree可以让Vim想大多数IDLE一样在窗口一侧显示文件树形结构。Vim中使用窗口分割的方式实现的。分割窗口的切换可以通过<code>&lt;Ctrl-ww&gt;</code>完成。
项目主页: <a href="https://github.com/scrooloose/nerdtree">https://github.com/scrooloose/nerdtree</a></p>
<h3 id="heading-1">安装插件</h3>
<ul>
<li>在<code>~/.vimrc</code>的<code>vundle</code>段中添加</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="nx">Plugin</span> <span class="s1">&#39;scrooloose/nerdtree&#39;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在command mode下输入</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="nx">PluginInstall</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="nerdtree-1">配置NERDTree</h3>
<p>在<code>~/.vimrc</code>中添加语句可以配置NERDTree。这些语句请根据个人喜好选择性添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; 打开NERDTree快捷键，设置为&lt;F2&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">map</span> <span class="p">&lt;</span><span class="nx">F2</span><span class="p">&gt;</span> :<span class="nx">NERDTreeToggle</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; 显示行号</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">NERDTreeShowLineNumbers</span><span class="p">=</span><span class="m">1</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">NERDTreeAutoCenter</span><span class="p">=</span><span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 是否显示隐藏文件</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">NERDTreeShowHidden</span><span class="p">=</span><span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 设置宽度</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">NERDTreeWinSize</span><span class="p">=</span><span class="m">30</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 在终端启动vim时，共享NERDTree</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">nerdtree_tabs_open_on_console_startup</span><span class="p">=</span><span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 忽略以下文件的显示</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">NERDTreeIgnore</span><span class="p">=</span>[<span class="s1">&#39;\.pyc&#39;</span><span class="p">,</span><span class="s1">&#39;\~$&#39;</span><span class="p">,</span><span class="s1">&#39;\.swp&#39;</span>]<span class="err">
</span><span class="err"></span><span class="c">&#34; 显示书签列表</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">NERDTreeShowBookmarks</span><span class="p">=</span><span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; 当vim中没有其他文件，值剩下nerdtree的时候，自动关闭窗口</span><span class="err">
</span><span class="err"></span><span class="nx">autocmd</span> <span class="nx">bufenter</span> * <span class="k">if</span> <span class="p">(</span><span class="nx">winnr</span><span class="p">(</span><span class="s2">&#34;$&#34;</span><span class="p">)</span> <span class="p">=</span><span class="p">=</span> <span class="m">1</span> &amp;&amp; <span class="nx">exists</span><span class="p">(</span><span class="s2">&#34;b:NERDTree&#34;</span><span class="p">)</span> &amp;&amp; <span class="nx">b</span>:<span class="nx">NERDTree</span>.<span class="nx">isTabTree</span><span class="p">(</span><span class="p">)</span><span class="p">)</span> <span class="p">|</span> <span class="nx">q</span> <span class="p">|</span> <span class="k">endif</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="nerdtree-2">使用NERDTree</h3>
<p>将窗口切换至NERDTree，可以通过快捷键对文件树进行操作。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>o</td>
<td align="center">打开关闭文件或者目录</td>
</tr>
<tr>
<td>t</td>
<td align="center">在标签页中打开</td>
</tr>
<tr>
<td>T</td>
<td align="center">在后台标签页中打开</td>
</tr>
<tr>
<td>!</td>
<td align="center">执行此文件</td>
</tr>
<tr>
<td>p</td>
<td align="center">到上层目录</td>
</tr>
<tr>
<td>P</td>
<td align="center">到根目录</td>
</tr>
<tr>
<td>K</td>
<td align="center">到第一个节点</td>
</tr>
<tr>
<td>J</td>
<td align="center">到最后一个节点</td>
</tr>
<tr>
<td>u</td>
<td align="center">打开上层目录</td>
</tr>
<tr>
<td>m</td>
<td align="center">显示文件系统菜单（添加、删除、移动操作）</td>
</tr>
<tr>
<td>?</td>
<td align="center">帮助</td>
</tr>
<tr>
<td>q</td>
<td align="center">关闭</td>
</tr>
</tbody>
</table>
<h2 id="nerdcommenter">自动注释与段注释插件：NerdCommenter</h2>
<p>这是一个对代码进行快速注释的插件。在很多图形化IDE中<code>&lt;Ctrl-/&gt;</code>经常用来表示对光标所在行或选中行的注释。NerdCommenter可以帮助我们在vim中使用这些功能。\<br>
项目主页：https://github.com/scrooloose/nerdcommenter</p>
<h3 id="heading-2">安装插件</h3>
<ul>
<li>在<code>~/.vimrc</code>的<code>vundle</code>段中添加</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="nx">Plugin</span> <span class="s1">&#39;scrooloose/nerdcommenter&#39;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在command mode下输入</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="nx">PluginInstall</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="nerdcommenter-1">初次使用NerdCommenter</h3>
<p>在没有任何配置的情况下插件已经可以使用了。具体说明可以查看<code>:help NERDCommenter</code>。最简单的注释/取消注释是通过<code>&lt;Leader&gt;c&lt;Space&gt;</code>实现的。</p>
<blockquote>
<p>vim的<code>&lt;Leader&gt;</code>键默认是<code>\</code>。</p>
</blockquote>
<h3 id="nerdcommenter-2">配置NerdCommenter</h3>
<p>其实这个插件做的很不错了，几乎不需要太多的配置我只是根据个人习惯做了些小修改:</p>
<pre><code>let g:NERDSpaceDelims = 1
imap &lt;D-/&gt; &lt;Esc&gt;&lt;leader&gt;c&lt;Space&gt;a
imap &lt;C-_&gt; &lt;Esc&gt;&lt;leader&gt;c&lt;Space&gt;a
map &lt;C-_&gt; &lt;Leader&gt;c&lt;Space&gt;
vmap &lt;C-_&gt; &lt;Leader&gt;c&lt;Space&gt;
</code></pre><ul>
<li>第一行：在代码和注释间加一个空格。</li>
<li>第二行：应为我用的是Mac电脑所以对于单行注释空<code>&lt;cmd-/&gt;</code>代替。</li>
<li>第三～五行：用<code>&lt;Ctrl-_&gt;</code>进行单行或多行注释。</li>
</ul>
<blockquote>
<ul>
<li><code>&lt;cmd-/&gt;</code>只能进行单行注释的原因是这个快捷键有可能被图像窗口（MacVim或终端）的快捷键冲突。</li>
</ul>
</blockquote>
<ul>
<li>这里不用<code>&lt;Ctrl-/&gt;</code>的原因是这个快捷键被Vim本身注册了。详见：<a href="https://stackoverflow.com/questions/9051837/how-to-map-c-to-toggle-comments-in-vim">How to map <code>&lt;C-/&gt;</code> to toggle comments in vim?</a></li>
</ul>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/linux/">Linux</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/development/">Development</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/vim/">Vim</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Fedora26中安装Google拼音输入法</title>
                <link>https://blog.xumijian.me/posts/google-pinyin/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/google-pinyin/</guid>
                <pubDate>Fri, 27 Oct 2017 12:26:29 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p>在Fedora25的时候sogou拼音出现了一些不兼容的情况，从而使我转而使用Google拼音。如今操作系统已经换成了Fedora26，这里就记录下安装Google拼音的过程。</p>
<h2 id="heading">输入法和输入源</h2>
<p>在Linux系统中，常用的输入源有ibus和fcitx两种，输入法又会被安装在输入源中（Google拼音在fcitx里）。这两种输入源也是不可以同时使用的。Fedora26默认的输入源是ibus（大部分Linux都是），这里带有拼音输入法，但是非常难用。所以要安装Google拼音就需要安装fcitx，并且能停用ibus。这里需要安装的主要工具有：\</p>
<ul>
<li>fcitx</li>
<li>Googlepinyin</li>
<li>im-chooser</li>
</ul>
<h2 id="heading-1">安装软件源</h2>
<p><a href="https://repo.fdzh.org/">FZUG</a>是fedora的中文源，其中提供了Google拼音，详细信息如下</p>
<pre><code>名称         : fcitx-googlepinyin
版本         : 0.1.6
发布         : 3.git6536e18.fc26
架构         : x86_64
大小         : 133 k
Source       : fcitx-googlepinyin-0.1.6-3.git6536e18.fc26.src.rpm
仓库         : @System
来自仓库     : fzug-free
小结         : Googlepinyin module for fcitx
URL          : https://fcitx-im.org/wiki/Googlepinyin
协议         : GPLv3
描述         : fcitx-googlepinyin is a Googlepinyin module for fcitx.

</code></pre><p>所以先使用如下命令安装FZUG源</p>
<pre><code>dnf install https://repo.fdzh.org/FZUG/free/26/x86_64/fzug-release-26-0.2.noarch.rpm
</code></pre><h2 id="google">安装Google拼音</h2>
<p>直接用<code>dnf</code>安装会同时安装Google拼音的依赖，比如fcitx。但是装好之后会发现没办法在fcitx和ibus直接切换，所以还需要安装im-chooser。</p>
<pre><code>sudo dnf install fcitx-googlepinyin im-chooser
</code></pre><h2 id="heading-2">切换输入源</h2>
<p>im-chooser的功能是切换系统的输入源，这时我们要停用ibus，启用fcitx，在终端输入：</p>
<pre><code>im-chooser
</code></pre><p>出现输入法选择器窗口，选择fcitx，<strong>注销后即可生效</strong>
<img src="/img/google-pinyin/im-chooser.png" alt=""></p>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/linux/">Linux</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/tools/">Tools</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/fedora/">Fedora</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>SSH 隧道与端口转发</title>
                <link>https://blog.xumijian.me/posts/ssh-tunnel/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/ssh-tunnel/</guid>
                <pubDate>Thu, 26 Oct 2017 21:51:29 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p>中文可以称为SSH隧道，是SSH的一项非常重要的功能。它可以建立一条安全的SSH通道，并把任意的TCP连接放到这条通道中。通过建立这条隧道，用户可以从客户端直接访问服务器端基于TCP协议的服务如HTTP。</p>
<p>举个例子如果有一台接入教育网的服务器，同时我们又可以从公网访问之，那么我们可以从无法接入教育网的客户端与服务器端建立SSH Tunnel。这样客户端也可以访问教育网。这个过程分为两个步骤：\</p>
<ol>
<li>建立SSHTunnel\</li>
<li>设置本地代理</li>
</ol>
<h3 id="linuxmacos-ssh-tunnel">Linux/Macos 系统建立SSH Tunnel</h3>
<p>在登录终端时输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Bash" data-lang="Bash">ssh -D <span class="m">2080</span> user@server
</code></pre></td></tr></table>
</div>
</div><p>这样就成功建立了服务器端22端口与本地2080的端口的隧道。本地端口可以任意设置这要不与其他服务冲突即可，根据规则自定义端口号应该设置在1000以上。</p>
<h3 id="windows-ssh-tunnel">Windows 系统建立SSH Tunnel</h3>
<p>Windows操作系统中需要通过客户端建立SSH Tunnel。例如Xshell、Putty。这里以Putty为例\</p>
<ol>
<li>在Session面板中输入Host Name 或 IP Address\<br>
<img src="/img/ssh-tunnel/fig1.png" alt="">\</li>
<li>在左侧边栏SSH/Tunnels面板设置本地端口号和动态转发\<br>
<img src="/img/ssh-tunnel/fig2.png" alt=""></li>
</ol>
<p>最后保存配置并连接服务器即可。</p>
<h3 id="heading">设置本地代理服务器</h3>
<p>这个过程和任何设置代理服务器的方式一样，可以使用IE中默认的代理配置工具，也可以使用各种浏览器的代理工具，这里以Chrome浏览器中SwitchyOmega为例
<img src="/img/ssh-tunnel/fig3.png" alt=""></p>
<h2 id="heading-1">通过中间服务器远程连接内网服务器</h2>
<p>刚才我们介绍了如何将服务器端口转发到本地。现在设置这样一个场景：\</p>
<ul>
<li>有两台服务器 Server1 和 Server 2; 一台客户端PC Client。\</li>
<li>Server 1 可以连局域网和公网，Server 2只能连局域网，Client 只能连公网。\</li>
<li>我们想通过Client远程登录Server 2\<br>
在这样的场景下我们该如何去做呢，原理上是这样的：我们可以将Server 2的22端口通过Server 1映射到本地的一个自定义端口，然后SSH登录本机的这个端口即可。具体步骤如下：\</li>
</ul>
<h3 id="1-">1. 创建端口转发</h3>
<p>这里以Linux/Macos系统为例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ssh -N -f -L 127.0.0.1:1022:server2:22 user1@server1
</code></pre></td></tr></table>
</div>
</div><ul>
<li>-N 表示该命令不执行远程命令</li>
<li>-f 表示该命令在后台运行</li>
<li>-L 表示设置端口转发， <code>127.0.0.1:1022</code>为本地的目标端口，<code>server2:22</code>表示将转发局域网内服务器的22号端口</li>
</ul>
<h3 id="2-">2. 从本地端口登录局域网服务器</h3>
<p>这时在新的终端中从本地的1022号端口登录即可</p>
<pre><code>ssh user2@127.0.0.1 -p 1022
</code></pre><p>注意这里的<code>user2</code>是<code>server2</code>中的用户名而不是本机的</p>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/linux/">Linux</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/ssh/">SSH</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/linux/">Linux</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>发布代码到PyPI</title>
                <link>https://blog.xumijian.me/posts/publish-pypi/</link>
                <guid isPermaLink="true">https://blog.xumijian.me/posts/publish-pypi/</guid>
                <pubDate>Mon, 23 Oct 2017 21:51:29 +0800</pubDate>
                
                    <author>gomijianxu@gmail.com (Mijian Xu)</author>
                
                
                
                    <description><![CDATA[<p>作为开发者我们希望自己开发的Python模块可以被更多人使用，为了方便使用，<a href="https://pypi.python.org/pypi">PyPI</a>是管理Python模块最好用的工具之一。所以我们也希望把自己的代码放到PyPI上，以后就可以通过<code>pip install module</code>的方式安装模块了。</p>
<h2 id="-python-">生成一个本地的 Python 包</h2>
<ul>
<li>在本地python目录中新建<code>setup.py</code>文件。\</li>
<li>将源码放置在一个新建的目录中，目录名为模块名。\</li>
<li>在<code>setup.py</code>中写入包的配置信息。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">find_packages</span>

<span class="n">setup</span><span class="p">(</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sa"></span><span class="s2">&#34;</span><span class="s2">sft</span><span class="s2">&#34;</span><span class="p">,</span>
    <span class="n">version</span> <span class="o">=</span> <span class="sa"></span><span class="s2">&#34;</span><span class="s2">0.1</span><span class="s2">&#34;</span><span class="p">,</span>
    <span class="n">url</span> <span class="o">=</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">https://github.com/xumi1993/SFT</span><span class="s1">&#39;</span><span class="p">,</span>
    <span class="n">author</span> <span class="o">=</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Mijian Xu</span><span class="s1">&#39;</span><span class="p">,</span>
    <span class="n">author_email</span> <span class="o">=</span> <span class="sa"></span><span class="s1">&#39;</span><span class="s1">gomijianxu@gmail.com</span><span class="s1">&#39;</span><span class="p">,</span>
    <span class="n">packages</span> <span class="o">=</span> <span class="n">find_packages</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> 
    <span class="n">package_dir</span> <span class="o">=</span> <span class="p">{</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">sft</span><span class="s1">&#39;</span><span class="p">:</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">sft</span><span class="s1">&#39;</span><span class="p">}</span><span class="p">,</span>
    <span class="n">entry_points</span> <span class="o">=</span> <span class="p">{</span><span class="sa"></span><span class="s1">&#39;</span><span class="s1">console_scripts</span><span class="s1">&#39;</span><span class="p">:</span><span class="p">[</span>
            <span class="sa"></span><span class="s1">&#39;</span><span class="s1">get_events = sft.get_events:main</span><span class="s1">&#39;</span><span class="p">,</span>
            <span class="sa"></span><span class="s1">&#39;</span><span class="s1">get_resp = sft.get_resp:main</span><span class="s1">&#39;</span><span class="p">,</span>
            <span class="sa"></span><span class="s1">&#39;</span><span class="s1">get_stations = sft.get_stations:main</span><span class="s1">&#39;</span><span class="p">,</span>
            <span class="sa"></span><span class="s1">&#39;</span><span class="s1">get_synthetics = sft.get_synthetics:main</span><span class="s1">&#39;</span><span class="p">,</span>
            <span class="sa"></span><span class="s1">&#39;</span><span class="s1">get_timeseries = sft.get_timeseries:main</span><span class="s1">&#39;</span><span class="p">,</span>
            <span class="sa"></span><span class="s1">&#39;</span><span class="s1">get_traveltime = sft.get_traveltime:main</span><span class="s1">&#39;</span>
            <span class="p">]</span><span class="p">,</span> <span class="c1"># 将模块中的函数当作shell命令</span>
            <span class="p">}</span><span class="p">,</span>
    <span class="n">include_package_data</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">zip_safe</span><span class="o">=</span><span class="bp">False</span>
<span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>完成后其目录结构\<br>
<code>SFT</code> &mdash;&mdash; <code>sft</code> &mdash;&mdash; <code>get_events.py</code>\<br>
                       | &mdash; <code>get_resp.py</code> \<br>
                       | &mdash; ……\<br>
            | &mdash; <code>setup.py</code>\<br>
            | &mdash;  ……\</li>
<li>由于这个例子只依赖Python标准库，所以如果需要依赖其他第三方模块需要在<code>setup.py</code>中加一个字段：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">install_requires</span><span class="o">=</span><span class="p">[</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">Twisted&gt;=13.1.0</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">w3lib&gt;=1.17.0</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">queuelib</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">lxml</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">pyOpenSSL</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">cssselect&gt;=0.9</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">six&gt;=1.5.2</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">parsel&gt;=1.1</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">PyDispatcher&gt;=2.0.5</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="sa"></span><span class="s1">&#39;</span><span class="s1">service_identity</span><span class="s1">&#39;</span><span class="p">,</span>
    <span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="python">编译Python包</h2>
<p>使用下面命令打包一个源代码的包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="n">python</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">sdist</span> <span class="n">build</span>
</code></pre></td></tr></table>
</div>
</div><p>这样在当前目录的dist文件夹下，就会多出一个以tar.gz结尾的包了。</p>
<h2 id="pypi">注册PyPI</h2>
<p>打开<a href="https://pypi.python.org/pypi">PyPI</a>官网点击<strong>Register</strong>注册一个账户，记住用户名和密码后面要用。</p>
<h2 id="pypi-1">发布至PyPI</h2>
<p>官方推荐的方式是用<code>twine</code>模块（我在试用<code>python setup.py sdist upload</code>时没有成功）:</p>
<ul>
<li>
<p>安装<code>twine</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>sudo pip install twine</p>
<pre><code>- 上传包

    ```python
twine upload dist/*
</code></pre><p>命令行中会提示输入用户名密码，输入PyPI的用户名密码就发布成功了。</p>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/categories/python/">Python</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/development/">Development</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.xumijian.me/tags/python/">Python</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>