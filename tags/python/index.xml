<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Note to Tech</title>
    <link>https://blog.xumijian.me/tags/python/</link>
    <description>Recent content in Python on Note to Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Feb 2022 20:34:54 +0800</lastBuildDate><atom:link href="https://blog.xumijian.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>将Fortran中的数组与矩阵保存为numpy中的.npz文件</title>
      <link>https://blog.xumijian.me/post/npyfor/</link>
      <pubDate>Tue, 01 Feb 2022 20:34:54 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/npyfor/</guid>
      <description>&lt;p&gt;我们之前讨论过如何用python在三维矩阵中切片，在Python中保存三维矩阵和它的三个坐标轴的方法有用&lt;code&gt;numpy.savez&lt;/code&gt;将数组和矩阵用不同的键值对保存至一个&lt;code&gt;.npz&lt;/code&gt;文件。这里将讨论如何用Fortran实现这一过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据切片与绘制的PyGMT实现</title>
      <link>https://blog.xumijian.me/post/pygmt-section/</link>
      <pubDate>Tue, 30 Nov 2021 20:13:09 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/pygmt-section/</guid>
      <description>&lt;p&gt;在GMT绘图前经常需要计算数据并保存到本地，再用GMT调用本地数据文件进行绘图。对数据可视化造成了不便。随着&lt;a href=&#34;https://www.pygmt.org/latest/index.html&#34;&gt;PyGMT&lt;/a&gt;的出现，我们可以在Python脚本中先进行数据计算，后进行绘图。这不仅提高了数据可视化的效率，也解决了Python对地图绘制能力弱的问题。&lt;/p&gt;
&lt;p&gt;这里我们介绍用Python从3D数据结构体中进行数据切片，同时用PyGMT绘图的实例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用GMT、PyVista和Paraview对速度模型、地形起伏、Moho面起伏进行三维可视化</title>
      <link>https://blog.xumijian.me/post/paraview-model/</link>
      <pubDate>Sun, 07 Mar 2021 05:12:28 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/paraview-model/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://blog.xumijian.me/img/paraview/model_NW.png&#34; alt=&#34;&#34;&gt;
我们通过计算获得了地壳三维速度模型、Moho面起伏，为例对比壳内低速区与Moho面起伏的关系，可以将这些结果用Paraview进行三维可视化。由于数据格式的不同，我们需要借助GMT和PyVista辅助绘制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BQMail2.0: 向IRIS DMC发送数据请求的Python模块（2. 发送申请）</title>
      <link>https://blog.xumijian.me/post/bqmail2/</link>
      <pubDate>Wed, 26 Aug 2020 11:31:38 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/bqmail2/</guid>
      <description>&lt;p&gt;在发送数据之前我们需要先查询所需台站和事件。BQMail将根据这些信息发送数据申请。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BQMail2.0: 向IRIS DMC发送数据请求的Python模块（1. 数据查询）</title>
      <link>https://blog.xumijian.me/post/bqmail1/</link>
      <pubDate>Tue, 09 Jun 2020 16:58:02 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/bqmail1/</guid>
      <description>&lt;p&gt;BQMail是用于向IRIS申请数据的Python模块。2016年我们完成了BQMail 1.0版本，但受限于当时IRIS服务的欠缺，随着时间的发展软件出现了以下不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送命令繁琐&lt;/li&gt;
&lt;li&gt;需要本地地震目录&lt;/li&gt;
&lt;li&gt;可拓展性差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我们重写了BQMail的源码，结合了&lt;a href=&#34;http://service.iris.edu/fdsnws/&#34;&gt;IRIS DMC Web Services&lt;/a&gt;和&lt;a href=&#34;http://docs.obspy.org/&#34;&gt;ObsPy&lt;/a&gt;，实现了地震和台站的快速查询，并能够以Python模块的方式调用来发送数据请求。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>判断地理坐标点是否在多边形内的Python实现</title>
      <link>https://blog.xumijian.me/post/points-in-polygon/</link>
      <pubDate>Tue, 08 Oct 2019 21:05:16 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/points-in-polygon/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mpipool Mpi4py</title>
      <link>https://blog.xumijian.me/post/mpipool-mpi4py/</link>
      <pubDate>Thu, 03 Jan 2019 13:31:58 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/mpipool-mpi4py/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://mpi4py.readthedocs.io/en/stable/index.html&#34;&gt;mpi4py&lt;/a&gt; is a python API for MPI. &lt;strong&gt;MPIPoolExecutor&lt;/strong&gt; is a subclass of &lt;code&gt;mpi4py.futures&lt;/code&gt; to create MPI processes to execute calls asynchronously&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>发布代码到PyPI</title>
      <link>https://blog.xumijian.me/post/publish-pypi/</link>
      <pubDate>Mon, 23 Oct 2017 21:51:29 +0800</pubDate>
      
      <guid>https://blog.xumijian.me/post/publish-pypi/</guid>
      <description>&lt;p&gt;作为开发者我们希望自己开发的Python模块可以被更多人使用，为了方便使用，&lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;PyPI&lt;/a&gt;是管理Python模块最好用的工具之一。所以我们也希望把自己的代码放到PyPI上，以后就可以通过&lt;code&gt;pip install module&lt;/code&gt;的方式安装模块了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
